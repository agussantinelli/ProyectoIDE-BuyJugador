@page "/tipos-producto"
@attribute [Authorize]

@using ApiClient
@using DTOs
@inject TipoProductoApiClient tipoProductoApiClient

<div class="tbl-container">
    <div class="tbl-header">
        <h2 class="tbl-title">Gestión de Tipos de Producto</h2>

        <div class="tbl-search">
            <span class="bi bi-search tbl-search-icon" aria-hidden="true"></span>
            <input class="tbl-input" type="text" placeholder="Buscar tipo de producto..."
                   @bind="searchString" @bind:event="oninput" />
            <button class="btn btn-primary" @onclick="CrearTipoProducto">
                <i class="bi bi-plus-circle"></i>
                <span>Nuevo</span>
            </button>
        </div>
    </div>

    @if (filteredTiposProducto == null)
    {
        <div class="tbl-state">
            <i class="bi bi-arrow-repeat spin"></i> Cargando tipos de producto...
        </div>
    }
    else if (!filteredTiposProducto.Any())
    {
        <div class="tbl-state">
            <i class="bi bi-inbox"></i> No se encontraron tipos de producto.
        </div>
    }
    else
    {
        <div class="tbl-wrapper">
            <table class="tbl table-striped table-hover">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Descripción</th>
                        <th class="tbl-text-end">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var tipoProducto in filteredTiposProducto)
                    {
                        <tr>
                            <td class="tbl-truncate">@tipoProducto.Descripcion</td>
                            <td class="tbl-muted tbl-truncate">@tipoProducto.Descripcion</td>
                            <td class="tbl-text-end">
                                <div class="tbl-actions">
                                    <button class="tbl-icon-btn" title="Editar" @onclick="() => EditarTipoProducto(tipoProducto.IdTipoProducto)">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                    <button class="tbl-icon-btn tbl-icon-btn--danger" title="Eliminar" @onclick="() => EliminarTipoProducto(tipoProducto.IdTipoProducto)">
                                        <i class="bi bi-trash3"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<DTOs.TipoProductoDTO> tiposProducto;
    private List<DTOs.TipoProductoDTO> filteredTiposProducto;
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarTiposProducto();
    }

    private async Task CargarTiposProducto()
    {
        tiposProducto = await tipoProductoApiClient.GetAllAsync();
        FiltrarTiposProducto();
    }

    private void FiltrarTiposProducto()
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredTiposProducto = tiposProducto;
        }
        else
        {
            filteredTiposProducto = tiposProducto
                .Where(tp =>
                    (tp.Descripcion ?? string.Empty).Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                    (tp.Descripcion ?? string.Empty).Contains(searchString, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchString = e.Value.ToString();
        FiltrarTiposProducto();
        StateHasChanged();
    }

    void CrearTipoProducto()
    {
        // TODO: Debes crear la página/componente para crear un tipo de producto
        // NavigationManager.NavigateTo("/crear-tipoproducto");
        Console.WriteLine("Navegando a la página de creación...");
    }

    void EditarTipoProducto(int id)
    {
        // TODO: Debes crear la página/componente para editar un tipo de producto
        // NavigationManager.NavigateTo($"/editar-tipoproducto/{id}");
        Console.WriteLine($"Navegando a la página de edición para el ID: {id}");
    }

    async Task EliminarTipoProducto(int id)
    {
        // Aquí podrías agregar una confirmación (ej. un modal) antes de eliminar
        await tipoProductoApiClient.DeleteAsync(id);
        // Si se eliminó correctamente, recargamos la lista
        await CargarTiposProducto();
    }
}