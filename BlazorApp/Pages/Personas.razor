@page "/personas"
@attribute [Authorize]

@using ApiClient
@using DTOs
@inject PersonaApiClient personaApiClient
@inject UserSessionService userSession

<div class="tbl-container">
    <div class="tbl-header">
        <h2 class="tbl-title">Gestión de Personas</h2>

        <div class="tbl-search">
            <span class="bi bi-search tbl-search-icon" aria-hidden="true"></span>
            <input class="tbl-input" type="text" placeholder="Buscar persona..."
                   value="@textoFiltro" @oninput="OnFiltroChanged" />


            @if (esAdmin)
            {
                <button class="btn btn-primary" @onclick="Nuevo">
                    <i class="bi bi-plus-circle"></i>
                    <span>Nuevo</span>
                </button>
            }
        </div>
    </div>

    @if (activos == null || inactivos == null)
    {
        <div class="tbl-state">
            <i class="bi bi-arrow-repeat spin"></i> Cargando personas...
        </div>
    }
    else
    {
        <div class="tbl-wrapper">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link @(tabActivos ? "active" : "")" href="#" @onclick="(() => ChangeTab(true))">Activos</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(!tabActivos ? "active" : "")" href="#" @onclick="(() => ChangeTab(false))">Inactivos</a>
                </li>
            </ul>
            <table class="tbl table-striped table-hover">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>DNI</th>
                        <th>Email</th>
                        <th>Teléfono</th>
                        <th>Dirección</th>
                        <th>Fecha Ingreso</th>
                        <th>Localidad</th>
                        <th>Provincia</th>
                        <th class="tbl-text-end">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in personasFiltradas)
                    {
                        <tr>
                            <td class="tbl-truncate">@p.NombreCompleto</td>
                            <td>@p.Dni</td>
                            <td class="tbl-truncate">@p.Email</td>
                            <td>@p.Telefono</td>
                            <td class="tbl-truncate">@p.Direccion</td>
                            <td>@p.FechaIngresoFormateada</td>
                            <td>@p.LocalidadNombre</td>
                            <td>@p.ProvinciaNombre</td>
                            <td class="tbl-text-end">
                                <div class="tbl-actions">
                                    @if (tabActivos)
                                    {
                                        <button class="tbl-icon-btn" title="Editar" @onclick="() => Editar(p)">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                        <button class="tbl-icon-btn tbl-icon-btn--danger" title="Dar baja" @onclick="() => DarBaja(p)">
                                            <i class="bi bi-trash3"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="tbl-icon-btn" title="Reactivar" @onclick="() => Reactivar(p)">
                                            <i class="bi bi-arrow-repeat"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<PersonaDTO>? activos;
    private List<PersonaDTO>? inactivos;
    private List<PersonaDTO> personasFiltradas = new();
    private bool tabActivos = true;
    private string textoFiltro = "";
    private bool esAdmin;

    private void OnFiltroChanged(ChangeEventArgs e)
    {
        textoFiltro = e.Value?.ToString() ?? "";
        AplicarFiltro();
    }

    protected override async Task OnInitializedAsync()
    {
        esAdmin = await userSession.EsAdminAsync();
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        activos = await personaApiClient.GetAllAsync() ?? new();
        inactivos = await personaApiClient.GetInactivosAsync() ?? new();
        AplicarFiltro();
    }

    private void ChangeTab(bool mostrarActivos)
    {
        tabActivos = mostrarActivos;
        AplicarFiltro();
    }

    private void AplicarFiltro()
    {
        var origen = tabActivos ? activos : inactivos;

        personasFiltradas = origen
            ?.Where(p =>
                string.IsNullOrWhiteSpace(textoFiltro)
                || (p.NombreCompleto?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
                || p.Dni.ToString().Contains(textoFiltro))
            .ToList() ?? new();
    }

    private void Nuevo() { }

    private void Editar(PersonaDTO p) { }

    private async Task DarBaja(PersonaDTO p)
    {
        var resp = await personaApiClient.DeleteAsync(p.IdPersona);
        if (resp.IsSuccessStatusCode) await CargarDatos();
    }

    private async Task Reactivar(PersonaDTO p)
    {
        var resp = await personaApiClient.ReactivarAsync(p.IdPersona);
        if (resp.IsSuccessStatusCode) await CargarDatos();
    }
}
