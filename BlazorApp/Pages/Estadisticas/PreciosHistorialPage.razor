@page "/reporte/precios"
@using System
@using System.Linq
@using ApiClient
@inject ReporteApiClient Reportes
@inject PrecioVentaApiClient Precios
@inject IJSRuntime JS

@code {
    private string ApiBase => "https://localhost:7145";

    // Límites
    DateTime Today = DateTime.Today;
    DateTime HardMin = new DateTime(2022, 1, 1);
    DateTime? MinFrom; // mínima del historial
    DateTime EffectiveMinFrom => (MinFrom.HasValue && MinFrom.Value > HardMin) ? MinFrom.Value.Date : HardMin;

    // Rango
    DateTime? from;
    DateTime? to;

    int cacheBust = 0;
    bool loading = false;

    string ImgUrl => $"{ApiBase}/api/precios-venta/historial.png" +
                     $"?from={(from.HasValue ? from.Value.ToString("yyyy-MM-dd") : "")}" +
                     $"&to={(to.HasValue ? to.Value.ToString("yyyy-MM-dd") : "")}" +
                     $"&w=1200&h=500&_={cacheBust}";

    string MinFromStr => EffectiveMinFrom.ToString("yyyy-MM-dd");
    string TodayStr => Today.ToString("yyyy-MM-dd");

    protected override async Task OnInitializedAsync()
    {
        // mínima histórica
        var hist = await Precios.GetHistorialAsync();
        MinFrom = hist?
            .SelectMany(p => p.Puntos)
            .Select(p => (DateTime?)p.Fecha.Date)
            .OrderBy(d => d)
            .FirstOrDefault();

        // rango inicial
        from = Today.AddDays(-180);
        if (from < EffectiveMinFrom) from = EffectiveMinFrom;
        to = Today;
    }

    bool RangoInvalido => from.HasValue && to.HasValue && from.Value.Date > to.Value.Date;
    bool CanExport => !RangoInvalido && from.HasValue && to.HasValue;

    void NormalizeFrom()
    {
        if (!from.HasValue) return;
        from = from.Value.Date;
        if (from < EffectiveMinFrom) from = EffectiveMinFrom;
        if (to.HasValue && from > to) to = from;
    }

    void NormalizeTo()
    {
        if (!to.HasValue) return;
        to = to.Value.Date;
        if (to > Today) to = Today;
        if (from.HasValue && to < from) from = to;
    }

    async Task RefrescarAsync()
    {
        NormalizeFrom();
        NormalizeTo();

        loading = true;
        cacheBust++;
        try
        {
            // simulamos pequeña espera para que cambie la URL y recargue el <img>
            await Task.Delay(120);
        }
        finally
        {
            loading = false;
        }
        StateHasChanged();
    }

    async Task DescargarPdfAsync()
    {
        NormalizeFrom();
        NormalizeTo();

        if (!CanExport) return;

        var bytes = await Reportes.GetHistorialPreciosPdfAsync(from, to, 1200, 500);
        if (bytes is null) return;

        var base64 = Convert.ToBase64String(bytes);
        var safeName = $"Historial {DateTime.Now:dd-MM-yyyy HH.mm.ss}.pdf";
        await JS.InvokeVoidAsync("saveAsFile", safeName, base64);
    }
}

<div class="report-wrap">
    <div class="report-card">
        <div class="report-header">
            <div class="report-titles">
                <h2 class="title">Historial de Precios</h2>
                <p class="subtitle">Visualizá la evolución de precios en el rango seleccionado.</p>
            </div>

            <div class="actions">
                <button class="btn btn-primary"
                        @onclick="RefrescarAsync"
                        disabled="@RangoInvalido || loading">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                        <span>Actualizando…</span>
                    }
                    else
                    {
                        <i class="bi bi-arrow-repeat me-1"></i>
                        <span>Actualizar</span>
                    }
                </button>

                <!-- OJO: NO depende de loading -->
                <button class="btn btn-primary"
                        @onclick="DescargarPdfAsync"
                        disabled="@(!CanExport)">
                    <i class="bi bi-file-earmark-pdf me-1"></i>
                    <span>Descargar PDF</span>
                </button>
            </div>
        </div>

        <div class="filter-bar">
            <div class="filter-group">
                <label class="form-label">Desde</label>
                <InputDate @bind-Value="from"
                           @bind-Value:event="oninput"
                           class="form-control"
                           min="@MinFromStr"
                           max="@TodayStr"
                           @onblur="@(_ => NormalizeFrom())" />
                <small class="text-muted">Mínimo permitido: @EffectiveMinFrom.ToString("dd/MM/yyyy")</small>
            </div>

            <div class="filter-group">
                <label class="form-label">Hasta</label>
                <InputDate @bind-Value="to"
                           @bind-Value:event="oninput"
                           class="form-control"
                           min="@MinFromStr"
                           max="@TodayStr"
                           @onblur="@(_ => NormalizeTo())" />
                <small class="text-muted">Máximo permitido: @Today.ToString("dd/MM/yyyy")</small>
            </div>

            <div class="hint">
                @if (RangoInvalido)
                {
                    <span class="text-danger"><i class="bi bi-exclamation-triangle me-1"></i> El rango es inválido</span>
                }
                else if (from.HasValue || to.HasValue)
                {
                    <span class="text-muted">
                        @if (from.HasValue && to.HasValue)
                        {
                            <i class="bi bi-calendar2-range me-1"></i>
                            <span>Mostrando de @from.Value.ToString("dd/MM/yyyy") a @to.Value.ToString("dd/MM/yyyy")</span>
                        }
                        else if (from.HasValue)
                        {
                            <i class="bi bi-calendar2-plus me-1"></i>
                            <span>Desde @from.Value.ToString("dd/MM/yyyy")</span>
                        }
                        else if (to.HasValue)
                        {
                            <i class="bi bi-calendar2-minus me-1"></i>
                            <span>Hasta @to.Value.ToString("dd/MM/yyyy")</span>
                        }
                    </span>
                }
            </div>
        </div>

        <div class="chart-card">
            @if (RangoInvalido)
            {
                <div class="state">
                    <i class="bi bi-slash-circle"></i>
                    <div>
                        <strong>Rango inválido</strong>
                        <div>La fecha “Desde” no puede ser mayor que “Hasta”.</div>
                    </div>
                </div>
            }
            else
            {
                <div class="ratio ratio-21x9 chart-host">
                    @if (loading)
                    {
                        <div class="chart-skeleton">
                            <div class="sk-row"></div>
                            <div class="sk-row"></div>
                            <div class="sk-row"></div>
                        </div>
                    }
                    <img src="@ImgUrl" class="img-fluid chart-image @(loading ? "d-none" : "")" alt="Historial de precios" />
                </div>
            }
        </div>
    </div>
</div>
