@page "/reporte/ventas"
@attribute [Authorize]

@using ApiClient
@using DTOs
@inject PersonaApiClient personaApiClient
@inject ReporteApiClient reporteApiClient
@inject IJSRuntime JSRuntime
@inject NavigationManager Nav

<link href="css/Table.css" rel="stylesheet" />

<div class="tbl-container">
    <div class="tbl-header">
        <h2 class="tbl-title">Reporte de Ventas por Vendedor (Últimos 7 días)</h2>
    </div>

    @if (personas == null)
    {
        <div class="tbl-state">Cargando vendedores...</div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap gap-2">
            <div style="min-width: 320px; flex-grow: 1;">
                <label for="vendedor" class="form-label">Seleccione un vendedor:</label>
                <select id="vendedor"
                        class="form-select @(showSelectAsInvalid ? "is-invalid" : "")"
                        @onchange="OnVendedorSeleccionado"
                        disabled="@(isLoadingReporte || isDownloadingPdf)">
                    <option value="0">-- Por favor, elija un vendedor --</option>
                    @foreach (var persona in personas)
                    {
                        <option value="@persona.IdPersona">@persona.NombreCompleto</option>
                    }
                </select>

                @if (!string.IsNullOrWhiteSpace(validationMessage))
                {
                    <div class="invalid-feedback d-block">
                        @validationMessage
                    </div>
                }
            </div>

            <button class="btn btn-success align-self-end"
                    @onclick="DescargarPdf"
                    disabled="@(!HasMinSales || isDownloadingPdf)">
                @if (isDownloadingPdf)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span class="ms-1">Generando...</span>
                }
                else
                {
                    <i class="bi bi-file-earmark-pdf me-1"></i>
                    <span>Descargar PDF</span>
                }
            </button>
        </div>

        @if (isLoadingReporte)
        {
            <div class="tbl-state mt-4"><i class="bi bi-arrow-repeat spin"></i> Generando reporte...</div>
        }
        else if (reporteData != null)
        {
            @if (blockedByRule)
            {
                <div class="alert alert-warning mt-3" role="alert" aria-live="polite">
                    No se puede generar el informe: el vendedor seleccionado tiene
                    <strong>@ventasDetectadas</strong> venta@(ventasDetectadas == 1 ? "" : "s")
                    en los últimos 7 días. Se requiere al menos <strong>@MinVentasRequeridas</strong>.
                </div>
            }

            @if (HasMinSales)
            {
                <div class="tbl-wrapper">
                    <table class="tbl">
                        <thead>
                            <tr>
                                <th>ID Venta</th>
                                <th>Fecha</th>
                                <th>Estado</th>
                                <th class="tbl-text-end">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in reporteData)
                            {
                                <tr>
                                    <td>@item.IdVenta</td>
                                    <td>@item.Fecha.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>@item.Estado</td>
                                    <td class="tbl-text-end">@item.TotalVenta.ToString("C2")</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr class="tbl-total-row">
                                <td colspan="3" class="tbl-text-end"><strong>Total General:</strong></td>
                                <td class="tbl-text-end"><strong>@reporteData.Sum(r => r.TotalVenta).ToString("C2")</strong></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            }
        }
    }
</div>

@code {
    private List<PersonaSimpleDTO>? personas;
    private List<ReporteVentasDTO>? reporteData;

    private const int MinVentasRequeridas = 1;

    private string? validationMessage;
    private bool showSelectAsInvalid = false;
    private bool blockedByRule = false;
    private int ventasDetectadas = 0;
    private bool HasMinSales => (reporteData?.Count ?? 0) >= MinVentasRequeridas;

    private bool isLoadingReporte = false;
    private bool isDownloadingPdf = false;
    private int selectedPersonaId = 0;

    protected override async Task OnInitializedAsync()
    {
        personas = await personaApiClient.GetPersonasActivasParaReporteAsync() ?? new List<PersonaSimpleDTO>();
    }

    private async Task OnVendedorSeleccionado(ChangeEventArgs e)
    {
        validationMessage = null;
        showSelectAsInvalid = false;
        blockedByRule = false;
        ventasDetectadas = 0;
        reporteData = null;

        if (!int.TryParse(e.Value?.ToString(), out selectedPersonaId) || selectedPersonaId <= 0)
            return;

        isLoadingReporte = true;
        StateHasChanged();

        try
        {
            var datos = await reporteApiClient.GetReporteVentasPorVendedorAsync(selectedPersonaId);

            if (datos == null)
            {
                isLoadingReporte = false;
                showSelectAsInvalid = true;
                validationMessage = "Tu sesión expiró o no tenés permisos para ver este reporte. Iniciá sesión nuevamente.";
                return;
            }

            ventasDetectadas = datos.Count;

            if (ventasDetectadas < MinVentasRequeridas)
            {
                blockedByRule = true;
                showSelectAsInvalid = true;
                validationMessage = $"No se puede generar el informe: el vendedor seleccionado tiene {ventasDetectadas} venta{(ventasDetectadas == 1 ? "" : "s")} en los últimos 7 días. Se requiere al menos {MinVentasRequeridas}.";
                reporteData = new List<ReporteVentasDTO>(); 
            }
            else
            {
                reporteData = datos; 
            }
        }
        catch (Exception ex)
        {
            showSelectAsInvalid = true;
            validationMessage = $"Error al generar el reporte: {ex.Message}";
            reporteData = new List<ReporteVentasDTO>();
        }
        finally
        {
            isLoadingReporte = false;
        }
    }

    private async Task DescargarPdf()
    {
        if (selectedPersonaId == 0 || isDownloadingPdf || !HasMinSales) return;

        isDownloadingPdf = true;
        try
        {
            var pdfBytes = await reporteApiClient.GetReporteVentasPdfAsync(selectedPersonaId);
            if (pdfBytes != null)
            {
                var fileName = $"Historial {DateTime.Now:dd-MM-yyyy HH.mm.ss}.pdf";
                var base64 = Convert.ToBase64String(pdfBytes);
                await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, base64);
            }
        }
        finally
        {
            isDownloadingPdf = false;
        }
    }
}
