@page "/tipo-producto"
@attribute [Authorize]

@using ApiClient
@using DTOs
@inject TipoProductoApiClient tipoProductoApiClient
@inject NavigationManager NavigationManager

<div class="tbl-container">
    <div class="tbl-header">
        <h2 class="tbl-title">Gestión de Tipos de Producto</h2>

        <div class="tbl-search">
            <span class="bi bi-search tbl-search-icon" aria-hidden="true"></span>
            <input class="tbl-input" type="text" placeholder="Buscar por descripción..."
                   @bind="TextoBusqueda" @bind:event="oninput" />
            <button class="btn btn-primary" @onclick="NuevoTipoProducto">
                <i class="bi bi-plus-circle"></i>
                <span>Nuevo</span>
            </button>
        </div>
    </div>

    @if (tiposProductoFiltrados == null)
    {
        <div class="tbl-state">
            <i class="bi bi-arrow-repeat spin"></i> Cargando tipos de producto...
        </div>
    }
    else if (!tiposProductoFiltrados.Any())
    {
        <div class="tbl-state">
            <i class="bi bi-inbox"></i> No se encontraron tipos de producto.
        </div>
    }
    else
    {
        <div class="tbl-wrapper">
            <table class="tbl table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Descripción</th>
                        <th class="tbl-actions">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var tipo in tiposProductoFiltrados)
                    {
                        <tr>
                            <td>@tipo.IdTipoProducto</td>
                            <td>@tipo.Descripcion</td>
                            <td class="tbl-actions">
                                <button class="btn-icon" title="Editar" @onclick="() => Editar(tipo)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn-icon" title="Eliminar" @onclick="() => AbrirModalConfirmacion(tipo)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@if (mostrarModalConfirmacion)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalConfirmacion"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas eliminar el tipo de producto: <strong>@_tipoProductoParaEliminar?.Descripcion</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalConfirmacion">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="EliminarConfirmado">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<TipoProductoDTO>? _tiposProducto;
    private List<TipoProductoDTO>? tiposProductoFiltrados;
    private string _textoBusqueda = string.Empty;

    private string TextoBusqueda
    {
        get => _textoBusqueda;
        set
        {
            _textoBusqueda = value;
            AplicarFiltro();
        }
    }

    private bool mostrarModalConfirmacion = false;
    private TipoProductoDTO? _tipoProductoParaEliminar;

    protected override async Task OnInitializedAsync()
    {
        await CargarTiposProducto();
    }

    private async Task CargarTiposProducto()
    {
        _tiposProducto = await tipoProductoApiClient.GetAllAsync() ?? new();
        AplicarFiltro();
    }

    private void AplicarFiltro()
    {
        if (string.IsNullOrWhiteSpace(TextoBusqueda))
        {
            tiposProductoFiltrados = _tiposProducto;
        }
        else
        {
            tiposProductoFiltrados = _tiposProducto?
                .Where(p => (p.Descripcion ?? string.Empty).Contains(TextoBusqueda, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void NuevoTipoProducto() => NavigationManager.NavigateTo("/tipo-producto/agregar");

    private void Editar(TipoProductoDTO tipo) => NavigationManager.NavigateTo($"/tipo-producto/editar/{tipo.IdTipoProducto}");

    private void AbrirModalConfirmacion(TipoProductoDTO tipo)
    {
        _tipoProductoParaEliminar = tipo;
        mostrarModalConfirmacion = true;
    }

    private void CerrarModalConfirmacion()
    {
        mostrarModalConfirmacion = false;
        _tipoProductoParaEliminar = null;
    }

    private async Task EliminarConfirmado()
    {
        if (_tipoProductoParaEliminar != null)
        {
            try
            {
                await tipoProductoApiClient.DeleteAsync(_tipoProductoParaEliminar.IdTipoProducto);
                await CargarTiposProducto(); // Recarga la lista si la eliminación fue exitosa
            }
            catch (Exception ex)
            {
                // Opcional: Manejar o registrar el error
                Console.WriteLine($"Error al eliminar el tipo de producto: {ex.Message}");
            }
            finally
            {
                CerrarModalConfirmacion();
            }
        }
    }
}

