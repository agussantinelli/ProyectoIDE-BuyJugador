@page "/tipo-producto/{Id:int}/productos"
@attribute [Authorize]

@using ApiClient
@using DTOs
@inject TipoProductoApiClient TipoApi
@inject ProductoApiClient ProductoApi
@inject NavigationManager Nav

<link href="css/Table.css" rel="stylesheet" />

<div class="form-container tipo-prod-card">
    @if (isLoading)
    {
        <div class="tbl-state"><i class="bi bi-arrow-repeat spin"></i> Cargando productos...</div>
    }
    else
    {
        <div class="form-header tipo-prod-header">
            <h3 class="form-title">Productos de @descripcionTipo (@(productos?.Count ?? 0))</h3>
            <button class="btn btn-secondary" @onclick="Volver">
                <i class="bi bi-arrow-left"></i>
                <span>Volver</span>
            </button>
        </div>

        <div class="tbl-search tipo-prod-search">
            <span class="bi bi-search tbl-search-icon" aria-hidden="true"></span>
            <input class="tbl-input" type="text" placeholder="Buscar producto..."
                   @bind="TextoBusqueda" @bind:event="oninput" />
        </div>

        @if (productosFiltrados == null)
        {
            <div class="tbl-state"><i class="bi bi-arrow-repeat spin"></i> Cargando...</div>
        }
        else if (!productosFiltrados.Any())
        {
            <div class="tbl-state"><i class="bi bi-inbox"></i> No se encontraron productos.</div>
        }
        else
        {
            <div class="tbl-wrapper tipo-prod-wrapper">
                <table class="tbl table-striped table-hover tipo-prod-table">
                    <thead>
                        <tr>
                            <th class="col-nombre">Nombre</th>
                            <th class="col-desc">Descripción</th>
                            <th class="col-precio tbl-text-end">Precio</th>
                            <th class="col-stock tbl-text-end">Stock</th>
                            <th class="col-acciones">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in productosFiltrados)
                        {
                            <tr>
                                <td class="tbl-truncate">@p.Nombre</td>
                                <td class="tbl-truncate tbl-muted">@p.Descripcion</td>
                                <td class="tbl-text-end">@((p.PrecioActual ?? 0m).ToString("C"))</td>
                                <td class="tbl-text-end">@p.Stock</td>
                                <td class="col-acciones">
                                    <div class="tbl-actions">
                                        <button class="tbl-icon-btn" title="Editar" @onclick="() => Editar(p)">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>

@code {
    [Parameter] public int Id { get; set; }

    private bool isLoading = true;
    private string descripcionTipo = "Tipo";
    private List<ProductoDTO>? productos;
    private List<ProductoDTO>? productosFiltrados;

    private string _textoBusqueda = string.Empty;
    private string TextoBusqueda
    {
        get => _textoBusqueda;
        set { _textoBusqueda = value ?? string.Empty; AplicarFiltro(); }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var tipo = await TipoApi.GetByIdAsync(Id);
            descripcionTipo = tipo?.Descripcion ?? $"ID {Id}";
            productos = await ProductoApi.GetByTipoProductoIdAsync(Id) ?? new();
            AplicarFiltro();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AplicarFiltro()
    {
        if (productos is null) { productosFiltrados = new(); return; }
        if (string.IsNullOrWhiteSpace(TextoBusqueda)) { productosFiltrados = productos; return; }

        var f = TextoBusqueda.Trim();
        productosFiltrados = productos
            .Where(p =>
                (p.Nombre ?? "").Contains(f, StringComparison.OrdinalIgnoreCase) ||
                (p.Descripcion ?? "").Contains(f, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void Editar(ProductoDTO p) => Nav.NavigateTo($"/producto/editar/{p.IdProducto}");
    private void Volver() => Nav.NavigateTo("/tipo-producto");
}
