@page "/persona/editar/{Id:int}"
@attribute [Authorize]

@using ApiClient
@using DTOs
@inject PersonaApiClient PersonaApi
@inject ProvinciaApiClient ProvinciaApi
@inject LocalidadApiClient LocalidadApi
@inject NavigationManager Nav
@inject IJSRuntime JS
@using System.Net.Http

<link href="css/Table.css" rel="stylesheet" />
<link href="css/Form.css" rel="stylesheet" />

<div class="form-container">
    @if (isLoading)
    {
        <div class="tbl-state">
            <i class="bi bi-arrow-repeat spin"></i> Cargando persona...
        </div>
    }
    else if (Model is null)
    {
        <div class="alert alert-danger">No se encontró la persona.</div>
        <div class="form-actions mt-3">
            <button class="btn btn-secondary" @onclick="Cancelar">
                <i class="bi bi-arrow-left"></i><span>Volver</span>
            </button>
        </div>
    }
    else
    {
        <div class="form-header">
            <h3 class="form-title">Editando: @Model.NombreCompleto</h3>
            <button class="btn btn-secondary" @onclick="Cancelar">
                <i class="bi bi-arrow-left"></i><span>Volver</span>
            </button>
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
            </div>
        }
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success" role="alert">
                @successMessage
                <button type="button" class="btn-close" @onclick="() => successMessage = null" aria-label="Close"></button>
            </div>
        }

        <EditForm EditContext="@editContext" OnValidSubmit="@Guardar">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="nombre">Nombre completo</label>
                <InputText id="nombre" class="form-control" @bind-Value="Model.NombreCompleto" readonly />
            </div>

            <div class="form-group">
                <label for="dni">DNI</label>
                <InputNumber id="dni" class="form-control" @bind-Value="Model.Dni" readonly />
            </div>

            <div class="inline-2">
                <div class="form-group">
                    <label for="email">Email</label>
                    <InputText id="email" type="email" class="form-control" @bind-Value="Model.Email" />
                    <ValidationMessage class="validation-message" For="@(() => Model.Email)" />
                </div>
                <div class="form-group">
                    <label for="telefono">Teléfono</label>
                    <InputText id="telefono" class="form-control" @bind-Value="Model.Telefono" />
                    <ValidationMessage class="validation-message" For="@(() => Model.Telefono)" />
                </div>
            </div>

            <div class="form-group">
                <label for="direccion">Dirección</label>
                <InputText id="direccion" class="form-control" @bind-Value="Model.Direccion" />
                <ValidationMessage class="validation-message" For="@(() => Model.Direccion)" />
            </div>

            <div class="inline-2">
                <div class="form-group">
                    <label for="provincia">Provincia</label>
                    <InputSelect id="provincia" class="form-select" @bind-Value="IdProvincia" @onchange="OnProvinciaChanged">
                        <option value="">-- Seleccionar provincia --</option>
                        @foreach (var p in Provincias)
                        {
                            <option value="@p.IdProvincia">@p.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage class="validation-message" For="@(() => IdProvincia)" />
                </div>

                <div class="form-group">
                    <label for="localidad">Localidad</label>
                    <InputSelect id="localidad" class="form-select" @bind-Value="Model.IdLocalidad" disabled="@(!LocalidadesFiltradas.Any())">
                        <option value="">-- Seleccionar localidad --</option>
                        @foreach (var l in LocalidadesFiltradas)
                        {
                            <option value="@l.IdLocalidad">@l.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage class="validation-message" For="@(() => Model.IdLocalidad)" />
                </div>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                    <i class="bi bi-save"></i><span>@(isSaving ? "Guardando..." : "Guardar cambios")</span>
                </button>
                <button type="button" class="btn btn-outline-secondary" @onclick="Cancelar" disabled="@isSaving">
                    <i class="bi bi-x-circle"></i><span>Cancelar</span>
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }

    public class PersonaEditModel
    {
        public int IdPersona { get; set; }

        [Required] public string? NombreCompleto { get; set; }

        [Required, Range(1, int.MaxValue)]
        public int Dni { get; set; }

        [Required, EmailAddress]
        public string? Email { get; set; }

        [StringLength(30)]
        public string? Telefono { get; set; }

        [StringLength(200)]
        public string? Direccion { get; set; }

        [Required(ErrorMessage = "Seleccione una localidad")]
        [Range(1, int.MaxValue, ErrorMessage = "Seleccione una localidad válida")]
        public int? IdLocalidad { get; set; }
    }

    private PersonaEditModel? Model;
    private EditContext? editContext;

    private bool isLoading = true;
    private bool isSaving = false;
    private string? errorMessage;
    private string? successMessage;

    private List<ProvinciaDTO> Provincias = new();
    private List<LocalidadDTO> LocalidadesTodas = new();
    private int? _idProvincia;
    private int? IdProvincia
    {
        get => _idProvincia;
        set
        {
            if (_idProvincia != value)
            {
                _idProvincia = value;

                if (Model != null && value.HasValue && value > 0)
                {
                    Model.IdLocalidad = null;
                }
                else if (Model != null)
                {
                    Model.IdLocalidad = null;
                }
            }
        }
    }


    private List<LocalidadDTO> LocalidadesFiltradas =>
        (IdProvincia is null || IdProvincia == 0) ? new() : LocalidadesTodas.Where(l => l.IdProvincia == IdProvincia).OrderBy(l => l.Nombre).ToList();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var dto = await PersonaApi.GetByIdAsync(Id);
            Provincias = await ProvinciaApi.GetAllAsync() ?? new();
            LocalidadesTodas = await LocalidadApi.GetAllOrderedAsync() ?? new();

            if (dto is null)
            {
                Model = null;
                errorMessage = "No se encontró la persona.";
                return;
            }

            if (dto.IdLocalidad.HasValue && dto.IdLocalidad > 0)
            {
                var loc = LocalidadesTodas.FirstOrDefault(l => l.IdLocalidad == dto.IdLocalidad);
                IdProvincia = loc?.IdProvincia;
            }

            Model = new PersonaEditModel
            {
                IdPersona = dto.IdPersona,
                NombreCompleto = dto.NombreCompleto,
                Dni = dto.Dni,
                Email = dto.Email,
                Telefono = dto.Telefono,
                Direccion = dto.Direccion,
                IdLocalidad = dto.IdLocalidad
            };

            editContext = new EditContext(Model);
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Error de red o API al cargar datos: {httpEx.StatusCode} - {httpEx.Message}";
            Model = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado al cargar datos: {ex.Message}";
            Model = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Guardar()
    {
        if (Model is null || editContext == null || !editContext.Validate())
        {
            errorMessage = "Por favor, corrija los errores de validación.";
            successMessage = null;
            return;
        }

        isSaving = true;
        errorMessage = null;
        successMessage = null;
        StateHasChanged();

        try
        {
            var dto = new PersonaDTO
            {
                IdPersona = Model.IdPersona,
                NombreCompleto = Model.NombreCompleto,
                Dni = Model.Dni,
                Email = Model.Email?.Trim(),
                Telefono = string.IsNullOrWhiteSpace(Model.Telefono) ? null : Model.Telefono.Trim(),
                Direccion = string.IsNullOrWhiteSpace(Model.Direccion) ? null : Model.Direccion.Trim(),
                IdLocalidad = Model.IdLocalidad
            };

            var response = await PersonaApi.UpdateAsync(Id, dto);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "✅ Persona actualizada exitosamente. Redirigiendo...";
                StateHasChanged();
                await Task.Delay(2000);
                Nav.NavigateTo("/persona");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"❌ Error al actualizar: {error}";
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"❌ Error de red o API al guardar: {httpEx.StatusCode} - {httpEx.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"❌ Error inesperado al guardar: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task OnProvinciaChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var idProvincia))
        {
            IdProvincia = idProvincia > 0 ? idProvincia : (int?)null;
        }
        else
        {
            IdProvincia = null;
        }
        if (Model != null) Model.IdLocalidad = null;
        await Task.CompletedTask;
    }


    private void Cancelar() => Nav.NavigateTo("/persona");
}

