@page "/persona"
@attribute [Authorize]

@using ApiClient
@using DTOs
@using BlazorApp.Auth
@using BlazorApp.Shared
@inject PersonaApiClient personaApiClient
@inject UserSessionService userSession
@inject NavigationManager navigationManager

<link href="css/Table.css" rel="stylesheet" />
<link href="css/PersonaPage.razor.css" rel="stylesheet" />

@if (!string.IsNullOrEmpty(errorMensaje) && !isLoading)
{
    <div class="alert alert-danger" role="alert">
        <strong>Error:</strong> @errorMensaje
    </div>
}

<div class="tbl-container">
    <div class="tbl-header">
        <h2 class="tbl-title">Gestión de Personas</h2>

        <div class="tbl-search">
            <span class="bi bi-search tbl-search-icon" aria-hidden="true"></span>
            <input class="tbl-input" type="text" placeholder="Buscar persona..."
                   @bind="textoFiltro" @bind:event="oninput" />

            @if (esAdmin)
            {
                <button class="btn btn-primary" @onclick="Nuevo">
                    <i class="bi bi-plus-circle"></i>
                    <span>Nuevo</span>
                </button>
            }
        </div>
    </div>

    @if (isLoading)
    {
        <div class="tbl-state">
            <i class="bi bi-arrow-repeat spin"></i> Cargando personas...
        </div>
    }
    else
    {
        <div class="view-selector mb-3">
            <button class="btn @(mostrarActivos ? "btn-primary" : "btn-secondary")" @onclick="() => CambiarTab(true)">
                <i class="bi bi-check-circle"></i> Activos (@(activos?.Count ?? 0))
            </button>
            @if (esAdmin)
            {
                <button class="btn @(!mostrarActivos ? "btn-primary" : "btn-secondary")" @onclick="() => CambiarTab(false)">
                    <i class="bi bi-archive"></i> Inactivos (@(inactivos?.Count ?? 0))
                </button>
            }
        </div>

        <div class="tbl-wrapper personas-wrapper">
            <table class="tbl personas-table">
                <thead>
                    <tr>
                        <th class="col-nombre">Nombre</th>
                        <th class="col-dni">DNI</th>
                        <th class="col-rol">Rol</th>
                        <th class="col-email">Email</th>
                        <th class="col-tel">Teléfono</th>
                        <th class="col-loc">Localidad</th>
                        <th class="col-prov">Provincia</th>
                        <th class="col-acciones">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in PersonasFiltradas)
                    {
                        <tr>
                            <td class="col-nombre tbl-truncate">@p.NombreCompleto</td>
                            <td class="col-dni">@p.Dni</td>
                            <td class="col-rol">@p.Rol</td>
                            <td class="col-email tbl-truncate">@p.Email</td>
                            <td class="col-tel">@p.Telefono</td>
                            <td class="col-loc">@p.LocalidadNombre</td>
                            <td class="col-prov">@p.ProvinciaNombre</td>
                            <td class="col-acciones">
                                <div class="personas-actions">
                                    <button class="tbl-icon-btn" title="Ver ventas" @onclick="() => VerVentas(p)">
                                        <i class="bi bi-receipt"></i>
                                    </button>

                                    @if (mostrarActivos)
                                    {
                                        <button class="tbl-icon-btn" title="Editar" @onclick="() => Editar(p)">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                        <button class="tbl-icon-btn tbl-icon-btn--danger" title="Dar baja" @onclick="() => AbrirModalConfirmacion(p)">
                                            <i class="bi bi-trash3"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="tbl-icon-btn tbl-icon-btn--success" title="Reactivar" @onclick="() => Reactivar(p)">
                                            <i class="bi bi-arrow-clockwise"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<ConfirmationModal Title="Confirmar Baja"
                   IsVisible="_mostrarModalConfirmacion"
                   OnConfirm="DarBajaConfirmado"
                   OnCancel="CerrarModalConfirmacion"
                   IsProcessing="_isEliminando"
                   ConfirmButtonText="Dar de Baja">
    @if (_personaParaBaja != null)
    {
        <p>¿Estás seguro de que deseas dar de baja a: <strong>@_personaParaBaja.NombreCompleto</strong>?</p>
    }
</ConfirmationModal>

@code {
    private List<PersonaDTO>? activos;
    private List<PersonaDTO>? inactivos;
    private IEnumerable<PersonaDTO> PersonasFiltradas =>
        (mostrarActivos ? activos : inactivos)?
        .Where(p =>
            string.IsNullOrWhiteSpace(textoFiltro)
            || (p.NombreCompleto?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
            || (p.Dni.ToString().Contains(textoFiltro, StringComparison.OrdinalIgnoreCase))
            || (p.Rol?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
        )
        .OrderBy(p => p.NombreCompleto)
        ?? Enumerable.Empty<PersonaDTO>();

    private bool mostrarActivos = true;
    private string textoFiltro = string.Empty;
    private bool esAdmin;
    private bool isLoading = true;
    private string? errorMensaje;

    // State for confirmation modal
    private bool _mostrarModalConfirmacion = false;
    private PersonaDTO? _personaParaBaja;
    private bool _isEliminando = false;

    protected override async Task OnInitializedAsync()
    {
        esAdmin = await userSession.EsAdminAsync();
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        isLoading = true;
        errorMensaje = null;
        activos = null;
        inactivos = null;
        StateHasChanged();

        try
        {
            var activosTask = personaApiClient.GetAllAsync();
            var inactivosTask = esAdmin ? personaApiClient.GetInactivosAsync() : Task.FromResult<List<PersonaDTO>?>(new());

            await Task.WhenAll(activosTask, inactivosTask);

            activos = await activosTask ?? new();
            inactivos = await inactivosTask ?? new();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar personas: {ex.Message}";
            Console.WriteLine($"[ERROR] {errorMensaje}");
            activos = new();
            inactivos = new();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CambiarTab(bool esActivo)
    {
        if (isLoading) return;
        mostrarActivos = esActivo;
        textoFiltro = string.Empty;
    }

    private void Nuevo() => navigationManager.NavigateTo("/persona/crear");

    private void Editar(PersonaDTO p) => navigationManager.NavigateTo($"/persona/editar/{p.IdPersona}");

    private void AbrirModalConfirmacion(PersonaDTO personaParaBaja)
    {
        _personaParaBaja = personaParaBaja;
        _mostrarModalConfirmacion = true;
    }

    private void CerrarModalConfirmacion()
    {
        _personaParaBaja = null;
        _mostrarModalConfirmacion = false;
        _isEliminando = false;
    }

    private async Task DarBajaConfirmado()
    {
        if (_personaParaBaja == null) return;

        _isEliminando = true;
        errorMensaje = null;

        try
        {
            var resp = await personaApiClient.DeleteAsync(_personaParaBaja.IdPersona);
            if (resp.IsSuccessStatusCode)
            {
                CerrarModalConfirmacion();
                await CargarDatos();
            }
            else
            {
                var errorBody = await resp.Content.ReadAsStringAsync();
                errorMensaje = $"Error al dar de baja a {_personaParaBaja.NombreCompleto}: {resp.ReasonPhrase} ({resp.StatusCode}). {errorBody}";
                Console.WriteLine($"[ERROR] {errorMensaje}");
                _isEliminando = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error inesperado al dar de baja a {_personaParaBaja.NombreCompleto}: {ex.Message}";
            Console.WriteLine($"[ERROR] {errorMensaje}");
            _isEliminando = false;
            StateHasChanged();
        }
    }

    private void VerVentas(PersonaDTO p)
    {
        navigationManager.NavigateTo($"/persona/ventas/{p.IdPersona}");
    }

    private async Task Reactivar(PersonaDTO p)
    {
        errorMensaje = null;
        isLoading = true;
        StateHasChanged();
        try
        {
            var resp = await personaApiClient.ReactivarAsync(p.IdPersona);
            if (resp.IsSuccessStatusCode)
            {
                await CargarDatos();
            }
            else
            {
                var errorBody = await resp.Content.ReadAsStringAsync();
                errorMensaje = $"Error al reactivar a {p.NombreCompleto}: {resp.ReasonPhrase} ({resp.StatusCode}). {errorBody}";
                Console.WriteLine($"[ERROR] {errorMensaje}");
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error inesperado al reactivar a {p.NombreCompleto}: {ex.Message}";
            Console.WriteLine($"[ERROR] {errorMensaje}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}

