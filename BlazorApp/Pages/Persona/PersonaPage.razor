@page "/persona"
@attribute [Authorize]

@using ApiClient
@using DTOs
@inject PersonaApiClient personaApiClient
@inject UserSessionService userSession
@inject NavigationManager navigationManager

<div class="tbl-container">
    <div class="tbl-header">
        <h2 class="tbl-title">Gestión de Personas</h2>

        <div class="tbl-search">
            <span class="bi bi-search tbl-search-icon" aria-hidden="true"></span>
            <input class="tbl-input" type="text" placeholder="Buscar persona..."
                   @bind="textoFiltro" @bind:event="oninput" />

            @if (esAdmin)
            {
                <button class="btn btn-primary" @onclick="Nuevo">
                    <i class="bi bi-plus-circle"></i>
                    <span>Nuevo</span>
                </button>
            }
        </div>
    </div>

    @if (activos == null || inactivos == null)
    {
        <div class="tbl-state">
            <i class="bi bi-arrow-repeat spin"></i> Cargando personas...
        </div>
    }
    else
    {
        <div class="view-selector mb-3">
            <button class="btn @(mostrarActivos ? "btn-primary" : "btn-secondary")" @onclick="() => CambiarTab(true)">
                <i class="bi bi-check-circle"></i> Activos (@(activos?.Count ?? 0))
            </button>
            <button class="btn @(!mostrarActivos ? "btn-primary" : "btn-secondary")" @onclick="() => CambiarTab(false)">
                <i class="bi bi-archive"></i> Inactivos (@(inactivos?.Count ?? 0))
            </button>
        </div>

        <div class="tbl-wrapper">
            <table class="tbl table-striped table-hover">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>DNI</th>
                        <th>Rol</th>
                        <th>Email</th>
                        <th>Teléfono</th>
                        <th>Localidad</th>
                        <th>Provincia</th>
                        <th class="tbl-text-end">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in PersonasFiltradas)
                    {
                        <tr>
                            <td class="tbl-truncate">@p.NombreCompleto</td>
                            <td>@p.Dni</td>
                            <td>@p.Rol</td>
                            <td class="tbl-truncate">@p.Email</td>
                            <td>@p.Telefono</td>
                            <td>@p.LocalidadNombre</td>
                            <td>@p.ProvinciaNombre</td>
                            <td class="tbl-text-end">
                                <div class="tbl-actions">
                                    @if (mostrarActivos)
                                    {
                                        <button class="tbl-icon-btn" title="Editar" @onclick="() => Editar(p)">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                        <button class="tbl-icon-btn tbl-icon-btn--danger" title="Dar baja" @onclick="() => DarBaja(p)">
                                            <i class="bi bi-trash3"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="tbl-icon-btn tbl-icon-btn--success" title="Reactivar" @onclick="() => Reactivar(p)">
                                            <i class="bi bi-arrow-clockwise"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<PersonaDTO>? activos;
    private List<PersonaDTO>? inactivos;
    private IEnumerable<PersonaDTO> PersonasFiltradas =>
        (mostrarActivos ? activos : inactivos)?
        .Where(p =>
            string.IsNullOrWhiteSpace(textoFiltro)
            || (p.NombreCompleto?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
            || (p.Dni.ToString().Contains(textoFiltro, StringComparison.OrdinalIgnoreCase))
            || (p.Rol.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase))
        ) ?? Enumerable.Empty<PersonaDTO>();

    private bool mostrarActivos = true;
    private string textoFiltro = string.Empty;
    private bool esAdmin;

    protected override async Task OnInitializedAsync()
    {
        esAdmin = await userSession.EsAdminAsync();
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        var activosTask = personaApiClient.GetAllAsync();
        var inactivosTask = personaApiClient.GetInactivosAsync();

        await Task.WhenAll(activosTask, inactivosTask);

        activos = await activosTask ?? new();
        inactivos = await inactivosTask ?? new();
    }

    private void CambiarTab(bool esActivo)
    {
        mostrarActivos = esActivo;
    }

    private void Nuevo() => navigationManager.NavigateTo("/persona/crear");

    private void Editar(PersonaDTO p) => navigationManager.NavigateTo($"/persona/editar/{p.IdPersona}");

    private async Task DarBaja(PersonaDTO p)
    {
        var resp = await personaApiClient.DeleteAsync(p.IdPersona);
        if (resp.IsSuccessStatusCode) await CargarDatos();
    }

    private async Task Reactivar(PersonaDTO p)
    {
        var resp = await personaApiClient.ReactivarAsync(p.IdPersona);
        if (resp.IsSuccessStatusCode) await CargarDatos();
    }
}