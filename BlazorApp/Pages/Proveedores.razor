@page "/proveedores"
@attribute [Authorize]

@using ApiClient
@using DTOs
@inject ProveedorApiClient proveedorApiClient

<div class="tbl-container">
    <div class="tbl-header">
        <h2 class="tbl-title">Gestión de Proveedores</h2>

        <div class="tbl-search">
            <span class="bi bi-search tbl-search-icon"></span>
            <input class="tbl-input" type="text" placeholder="Buscar proveedor..."
                   @bind="textoFiltro" @bind:event="oninput" />
            <button class="btn btn-primary" @onclick="NuevoProveedor">
                <i class="bi bi-plus-circle"></i>
                <span>Nuevo</span>
            </button>
        </div>
    </div>

    @if (activos == null || inactivos == null)
    {
        <div class="tbl-state">
            <i class="bi bi-arrow-repeat spin"></i> Cargando proveedores...
        </div>
    }
    else
    {
        <ul class="nav nav-tabs mb-3">
            <li class="nav-item">
                <a class="nav-link @(mostrarActivos ? "active" : "")" href="#" @onclick="(() => CambiarTab(true))">Activos</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @(!mostrarActivos ? "active" : "")" href="#" @onclick="(() => CambiarTab(false))">Inactivos</a>
            </li>
        </ul>

        <div class="tbl-wrapper">
            <table class="tbl table-striped table-hover">
                <thead>
                    <tr>
                        <th>Razón Social</th>
                        <th>CUIT</th>
                        <th>Email</th>
                        <th>Teléfono</th>
                        <th>Dirección</th>
                        <th class="tbl-text-end">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in ProveedoresFiltrados)
                    {
                        <tr>
                            <td>@p.RazonSocial</td>
                            <td>@p.Cuit</td>
                            <td>@p.Email</td>
                            <td>@p.Telefono</td>
                            <td>@p.Direccion</td>
                            <td class="tbl-text-end">
                                <div class="tbl-actions">
                                    @if (mostrarActivos)
                                    {
                                        <button class="tbl-icon-btn" title="Editar" @onclick="() => Editar(p)">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                        <button class="tbl-icon-btn tbl-icon-btn--danger" title="Dar de baja" @onclick="() => Eliminar(p)">
                                            <i class="bi bi-trash3"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="tbl-icon-btn" title="Reactivar" @onclick="() => Reactivar(p)">
                                            <i class="bi bi-arrow-repeat"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<ProveedorDTO>? activos;
    private List<ProveedorDTO>? inactivos;
    private bool mostrarActivos = true;
    private string textoFiltro = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CargarProveedores();
    }

    private async Task CargarProveedores()
    {
        activos = await proveedorApiClient.GetAllAsync() ?? new();
        inactivos = await proveedorApiClient.GetInactivosAsync() ?? new();
    }

    private IEnumerable<ProveedorDTO> ProveedoresFiltrados =>
        (mostrarActivos ? activos : inactivos)
        .Where(p =>
            string.IsNullOrWhiteSpace(textoFiltro)
            || (p.RazonSocial?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
            || (p.Cuit?.Contains(textoFiltro) ?? false)
            || (p.Email?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
        );

    private void CambiarTab(bool activos)
    {
        mostrarActivos = activos;
    }

    private void NuevoProveedor()
    {
        // navegación o abrir modal para crear proveedor
    }

    private void Editar(ProveedorDTO proveedor)
    {
        // navegación a edición
    }

    private async Task Eliminar(ProveedorDTO proveedor)
    {
        var resp = await proveedorApiClient.DeleteAsync(proveedor.IdProveedor);
        if (resp.IsSuccessStatusCode)
        {
            await CargarProveedores();
        }
    }

    private async Task Reactivar(ProveedorDTO proveedor)
    {
        var resp = await proveedorApiClient.ReactivarAsync(proveedor.IdProveedor);
        if (resp.IsSuccessStatusCode)
        {
            await CargarProveedores();
        }
    }
}
