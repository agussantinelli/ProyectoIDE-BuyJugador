@page "/pedido"
@attribute [Authorize]

@using DTOs
@using ApiClient
@using BlazorApp.Auth
@inject PedidoApiClient pedidoApiClient
@inject UserSessionService userSession
@inject NavigationManager NavigationManager

<link href="css/Table.css" rel="stylesheet" />

@if (!string.IsNullOrEmpty(errorMensaje))
{
    <div class="alert alert-danger" role="alert">
        <strong>Error:</strong> @errorMensaje
        <button type="button" class="btn-close" @onclick="() => errorMensaje = null" aria-label="Close"></button>
    </div>
}
<div class="tbl-container">
    <div class="tbl-header">
        <h2 class="tbl-title">Gestión de Pedidos</h2>

        <div class="tbl-search">
            <span class="bi bi-search tbl-search-icon"></span>
            <input class="tbl-input" placeholder="Buscar proveedor..."
                   value="@textoFiltro" @oninput="OnFiltroChanged" />

            <button class="btn btn-primary" @onclick="NuevoPedido">
                <i class="bi bi-plus-circle"></i><span>Nuevo</span>
            </button>
        </div>
    </div>

    <p class="tbl-subtitle text-muted">Total pedidos cargados: <strong>@pedidos?.Count</strong></p>

    @if (pedidos == null && string.IsNullOrEmpty(errorMensaje))
    {
        <div class="tbl-state"><i class="bi bi-arrow-repeat spin"></i> Cargando pedidos...</div>
    }
    else if (pedidos != null && !pedidosFiltrados.Any() && string.IsNullOrEmpty(errorMensaje))
    {
        <div class="tbl-state"><i class="bi bi-inbox"></i> No se encontraron pedidos.</div>
    }
    else if (pedidos != null)
    {
        <div class="tbl-wrapper">
            <table class="tbl table-striped table-hover">
                <thead>
                    <tr>
                        <th>Nro Pedido</th>
                        <th>Fecha</th>
                        <th>Proveedor</th>
                        <th>Estado</th>
                        <th class="tbl-text-end">Total</th>
                        <th class="tbl-text-end">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in pedidosFiltrados)
                    {
                        bool estaPendiente = p.Estado == "Pendiente";

                        <tr>
                            <td>@p.IdPedido</td>
                            <td>@p.Fecha.ToString("dd/MM/yyyy")</td>
                            <td>@p.ProveedorRazonSocial</td>
                            <td>@p.Estado</td>
                            <td class="tbl-text-end">@FormatCurrency(p.Total)</td>
                            <td class="tbl-text-end">
                                <div class="tbl-actions">
                                    <button class="tbl-icon-btn" title="Ver detalle" @onclick="() => VerDetalle(p)">
                                        <i class="bi bi-eye"></i>
                                    </button>

                                    @if (estaPendiente)
                                    {
                                        <button class="tbl-icon-btn" title="Editar" @onclick="() => VerDetalle(p)">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                    }

                                    <button class="tbl-icon-btn @(estaPendiente ? "tbl-icon-btn--success" : "")"
                                            title="@(estaPendiente ? "Marcar como Recibido" : "Pedido ya recibido")"
                                            @onclick="() => Finalizar(p)"
                                            disabled="@(!estaPendiente)">
                                        <i class="bi bi-check-circle"></i>
                                    </button>

                                    @if (esAdmin)
                                    {
                                        <button class="tbl-icon-btn tbl-icon-btn--danger" title="Eliminar" @onclick="() => Eliminar(p)">
                                            <i class="bi bi-trash3"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<PedidoDTO>? pedidos;
    private List<PedidoDTO> pedidosFiltrados = new();
    private string textoFiltro = string.Empty;
    private bool esAdmin;
    private string? errorMensaje;

    private string FormatCurrency(decimal amount)
    {
        return amount.ToString("C");
    }

    protected override async Task OnInitializedAsync()
    {
        esAdmin = await userSession.EsAdminAsync();
        await CargarPedidos();
    }

    private async Task CargarPedidos()
    {
        errorMensaje = null;
        pedidos = null;

        try
        {
            pedidos = await pedidoApiClient.GetAllAsync();
            AplicarFiltro();
        }
        catch (Exception ex)
        {
            errorMensaje = $"No se pudieron cargar los pedidos: {ex.Message}";
            Console.WriteLine($"[ERROR] {errorMensaje}");
            pedidos = new();
        }
    }

    private void OnFiltroChanged(ChangeEventArgs e)
    {
        textoFiltro = e.Value?.ToString() ?? "";
        AplicarFiltro();
    }

    private void AplicarFiltro()
    {
        pedidosFiltrados = pedidos?
            .Where(p =>
                string.IsNullOrWhiteSpace(textoFiltro)
                || (p.ProveedorRazonSocial?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false))
            .ToList() ??
            new();
    }

    private void NuevoPedido()
    {
        NavigationManager.NavigateTo("/pedido/crear");
    }

    private void VerDetalle(PedidoDTO p)
    {
        NavigationManager.NavigateTo($"/pedido/detalle/{p.IdPedido}");
    }

    private async Task Eliminar(PedidoDTO p)
    {
        errorMensaje = null;
        try
        {
            var resp = await pedidoApiClient.DeleteAsync(p.IdPedido);

            if (resp.IsSuccessStatusCode)
            {
                await CargarPedidos();
            }
            else
            {
                errorMensaje = $"Error al eliminar el pedido {p.IdPedido}: {resp.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al eliminar: {ex.Message}";
        }
    }

    private async Task Finalizar(PedidoDTO p)
    {
        if (p.Estado != "Pendiente") return;

        errorMensaje = null;
        try
        {
            var resp = await pedidoApiClient.MarcarComoRecibidoAsync(p.IdPedido);

            if (resp.IsSuccessStatusCode)
            {
                await CargarPedidos();
            }
            else
            {
                errorMensaje = $"Error al finalizar el pedido {p.IdPedido}: {resp.StatusCode} ({resp.ReasonPhrase})";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al finalizar: {ex.Message}";
        }
    }
}

