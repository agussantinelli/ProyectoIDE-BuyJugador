@page "/login"
@layout Layout.EmptyLayout
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using System.Web
@using BlazorApp.Auth
@inject IHttpClientFactory HttpFactory
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav

<div class="login-container">
    <div class="login-box">
        <h2 class="text-center mb-4">Iniciar Sesión</h2>
        <EditForm Model="_model" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label>DNI</label>
                <InputText class="form-control" @bind-Value="_model.Dni" />
                <ValidationMessage For="@(() => _model.Dni)" />
            </div>
            <div class="mb-3">
                <label>Contraseña</label>
                <InputText class="form-control" @bind-Value="_model.Password" type="password" />
                <ValidationMessage For="@(() => _model.Password)" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@_loading">
                @if (_loading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> Ingresando...</span>
                }
                else
                {
                    <span>Ingresar</span>
                }
            </button>

            @if (!string.IsNullOrEmpty(_error))
            {
                <div class="alert alert-danger mt-2">@_error</div>
            }
        </EditForm>
    </div>
</div>


@code {
    private readonly LoginRequest _model = new();
    private bool _loading;
    private string? _error;

    private async Task OnSubmit()
    {
        _error = null;
        _loading = true;
        try
        {
            var client = HttpFactory.CreateClient("NoAuth");

            var response = await client.PostAsJsonAsync("api/Authentication/login", _model);

            if (!response.IsSuccessStatusCode)
            {
                _error = "Credenciales inválidas o error en el servidor.";
                return;
            }

            var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();
            var token = loginResponse?.Token;

            if (string.IsNullOrWhiteSpace(token))
            {
                _error = "La respuesta de la API no contenía un token válido.";
                return;
            }

            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.MarkUserAsLoggedInAsync(token);

            var uri = new Uri(Nav.Uri);
            var returnUrl = HttpUtility.ParseQueryString(uri.Query).Get("returnUrl");
            Nav.NavigateTo(string.IsNullOrWhiteSpace(returnUrl) ? "/" : returnUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            _error = "Error de conexión: " + ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    public class LoginRequest
    {
        [Required(ErrorMessage = "El DNI es obligatorio.")]
        public string Dni { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string Password { get; set; } = string.Empty;
    }

    public class LoginResponse
    {
        public string? Token { get; set; }
    }
}

