@page "/login"
@layout Layout.EmptyLayout
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using BlazorApp.Auth
@inject IHttpClientFactory HttpFactory
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav

<h3>Iniciar Sesión</h3>

<EditForm Model="_model" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />
    
    <div class="mb-3">
        <label>DNI</label>
        <InputText class="form-control" @bind-Value="_model.Dni" />
        <ValidationMessage For="@(() => _model.Dni)" />
    </div>
    <div class="mb-3">
        <label>Contraseña</label>
        <InputText class="form-control" @bind-Value="_model.Password" type="password" />
        <ValidationMessage For="@(() => _model.Password)" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@_loading">
        @if (_loading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span> Ingresando...</span>
        }
        else
        {
            <span>Login</span>
        }
    </button>
    
    @if (!string.IsNullOrEmpty(_error))
    {
        <div class="alert alert-danger mt-2">@_error</div>
    }
</EditForm>

@code {
    private readonly LoginRequest _model = new();
    private bool _loading;
    private string? _error;

    private async Task OnSubmit()
    {
        _error = null;
        _loading = true;
        try
        {
            // Creamos un cliente HttpClient que NO envía el token de autorización,
            // ya que para el login todavía no lo tenemos.
            var client = HttpFactory.CreateClient("NoAuth");

            // Asegúrate que "api/auth/login" es el endpoint correcto en tu WebAPI
            var response = await client.PostAsJsonAsync("api/auth/login", _model);

            if (!response.IsSuccessStatusCode)
            {
                _error = "Credenciales inválidas o error en el servidor.";
                return;
            }

            // Asumimos que la API devuelve un JSON con una propiedad "token"
            // Ejemplo: { "token": "ey..." }
            var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();
            var token = loginResponse?.Token;
            
            if (string.IsNullOrWhiteSpace(token))
            {
                _error = "La respuesta de la API no contenía un token válido.";
                return;
            }

            // Obtenemos nuestra implementación del provider para llamar a su método específico
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.MarkUserAsLoggedInAsync(token);

            // Redirigir al usuario. Si vino de una página protegida, lo devolvemos allí.
            var uri = new Uri(Nav.Uri);
            var returnUrl = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("returnUrl");
            Nav.NavigateTo(string.IsNullOrWhiteSpace(returnUrl) ? "/" : returnUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            _error = "Error de conexión: " + ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    // DTO para el formulario de login
    public class LoginRequest
    {
        [Required(ErrorMessage = "El DNI es obligatorio.")]
        public string Dni { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string Password { get; set; } = string.Empty;
    }

    // DTO para deserializar la respuesta del login
    public class LoginResponse
    {
        public string? Token { get; set; }
    }
}
