@page "/login"
@layout Layout.EmptyLayout
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using System.Web
@using BlazorApp.Auth
@using DTOs
@using Blazored.LocalStorage

@inject IHttpClientFactory HttpFactory
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav
@inject InMemoryUserSession UserSession
@inject ILocalStorageService LocalStorage

<div class="login-page-wrapper">
    <div class="login-card">
        <div class="card-body">

            <div class="text-center mb-4">
                <h3 class="card-title">Iniciar Sesión</h3>
                <p class="card-subtitle">Ingresa tus credenciales para continuar</p>
            </div>

            <EditForm Model="_model" OnValidSubmit="OnSubmit">
                <DataAnnotationsValidator />
                <div class="input-group mb-3">
                    <span class="input-group-text">
                        <i class="bi bi-person"></i>
                    </span>
                    <div class="form-floating">
                        <InputText class="form-control" id="dni" @bind-Value="_model.Dni" placeholder="DNI" />
                        <label for="dni">DNI</label>
                    </div>
                </div>
                <div class="validation-message-container">
                    <ValidationMessage For="@(() => _model.Dni)" />
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text">
                        <i class="bi bi-lock"></i>
                    </span>
                    <div class="form-floating">
                        <InputText class="form-control" id="password" type="password" @bind-Value="_model.Password" placeholder="Contraseña" />
                        <label for="password">Contraseña</label>
                    </div>
                </div>
                <div class="validation-message-container">
                    <ValidationMessage For="@(() => _model.Password)" />
                </div>

                @* --- ESTRUCTURA FINAL Y CORREGIDA PARA EL CHECKBOX --- *@
                <div class="form-check-wrapper">
                    <label class="form-check-label" for="rememberMe">
                        <InputCheckbox @bind-Value="_model.RememberMe" id="rememberMe" class="form-check-input" />
                        <span class="checkbox-custom"></span>
                        <span class="checkbox-text">Recordar sesión</span>
                    </label>
                </div>

                <div class="d-grid mt-4">
                    <button type="submit" class="btn btn-primary btn-lg" disabled="@_loading">
                        @if (_loading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-2">Ingresando...</span>
                        }
                        else
                        {
                            <span>Ingresar</span>
                        }
                    </button>
                </div>
                @if (!string.IsNullOrEmpty(_error))
                {
                    <div class="alert alert-danger text-center mt-3 animate__animated animate__shakeX">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        @_error
                    </div>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {
    private readonly LoginRequest _model = new();
    private bool _loading;
    private string? _error;

    private async Task OnSubmit()
    {
        _error = null;
        _loading = true;
        try
        {
            var client = HttpFactory.CreateClient("NoAuth");
            var response = await client.PostAsJsonAsync("api/Authentication/login", _model);

            if (!response.IsSuccessStatusCode)
            {
                _error = "Credenciales inválidas o error en el servidor.";
                return;
            }

            var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();
            var token = loginResponse?.Token;

            if (string.IsNullOrWhiteSpace(token))
            {
                _error = "La respuesta de la API no contenía un token válido.";
                return;
            }

            if (_model.RememberMe)
            {
                await LocalStorage.SetItemAsync("authToken", token);
            }
            else
            {
                UserSession.Token = token;
            }

            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            customAuthStateProvider.NotifyUserAuthentication(token);

            var uri = new Uri(Nav.Uri);
            var returnUrl = HttpUtility.ParseQueryString(uri.Query).Get("returnUrl");

            Nav.NavigateTo(string.IsNullOrWhiteSpace(returnUrl) ? "/" : returnUrl);
        }
        catch (Exception ex)
        {
            _error = "Error de conexión: " + ex.Message;
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    public class LoginRequest
    {
        [Required(ErrorMessage = "El DNI es obligatorio.")]
        public string Dni { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }

    public class LoginResponse
    {
        public string? Token { get; set; }
    }
}

