@page "/login"
@layout EmptyLayout

@using DTOs
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView>
    <NotAuthorized Context="authCtx">
        <div class="login-container">
            <div class="card">
                <div class="card-body">
                    <h3>Iniciar Sesión</h3>

                    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                        <div class="form-group">
                            <label for="dni">DNI</label>
                            <InputNumber id="dni"
                                         class="form-control"
                                         @bind-Value="loginModel.Dni" />
                        </div>

                        <div class="form-group mt-2">
                            <label for="pwd">Contraseña</label>
                            <InputText id="pwd"
                                       class="form-control"
                                       type="password"
                                       autocomplete="current-password"
                                       @bind-Value="loginModel.Password" />
                        </div>

                        <button type="submit" class="btn btn-primary mt-3">Login</button>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-2">@errorMessage</div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </NotAuthorized>

    <Authorized Context="authCtx">
        <p>Verificando sesión...</p>
    </Authorized>
</AuthorizeView>

@code {
    private class LoginModel
    {
        public int Dni { get; set; }
        public string Password { get; set; } = "";
    }

    private LoginModel loginModel = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            if (user.IsInRole("Dueño"))
                NavigationManager.NavigateTo("/dashboard-dueño");
            else if (user.IsInRole("Empleado"))
                NavigationManager.NavigateTo("/dashboard-empleado");
            else
                NavigationManager.NavigateTo("/productos");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            errorMessage = null;

            var response = await Http.PostAsJsonAsync("api/personas/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var loggedInUser = await response.Content.ReadFromJsonAsync<PersonaDTO>();
                await ((CustomAuthenticationStateProvider)AuthStateProvider)
                    .MarkUserAsAuthenticated(loggedInUser!);

                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "DNI o contraseña incorrectos.";
            }
        }
        catch
        {
            errorMessage = "Ocurrió un error al intentar iniciar sesión.";
        }
    }
}
