@page "/login"
@layout Layout.EmptyLayout
@using System.Net.Http.Json
@using BlazorApp.Auth
@inject IHttpClientFactory HttpFactory
@inject CustomAuthenticationStateProvider Auth

@inject NavigationManager Nav

<h3>Iniciar Sesión</h3>

<EditForm Model="_model" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>DNI</label>
        <InputText class="form-control" @bind-Value="_model.Dni" />
    </div>
    <div class="mb-3">
        <label>Contraseña</label>
        <InputText class="form-control" @bind-Value="_model.Password" type="password" />
    </div>

    <button class="btn btn-primary" disabled="@_loading">Login</button>
    @if (!string.IsNullOrEmpty(_error))
    {
        <div class="text-danger mt-2">@_error</div>
    }
</EditForm>

@code {
    private readonly LoginRequest _model = new();
    private bool _loading;
    private string? _error;

    private async Task OnSubmit()
    {
        _error = null;
        _loading = true;
        try
        {
            var client = HttpFactory.CreateClient("NoAuth");

            // ⚠️ Ajustá esta URL a tu endpoint real si difiere
            var resp = await client.PostAsJsonAsync("auth/login", _model);

            if (!resp.IsSuccessStatusCode)
            {
                _error = "Credenciales inválidas.";
                return;
            }

            // Suponemos que devuelve un string con el JWT. Si tu API devuelve { token: "..." } cambia esto.
            var token = await resp.Content.ReadFromJsonAsync<string>();
            if (string.IsNullOrWhiteSpace(token))
            {
                _error = "La API no devolvió token.";
                return;
            }

            await Auth.MarkUserAsAuthenticatedAsync(token);

            var uri = new Uri(Nav.Uri);
            var returnUrl = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("returnUrl");
            Nav.NavigateTo(string.IsNullOrWhiteSpace(returnUrl) ? "/" : returnUrl);
        }
        catch (Exception ex)
        {
            _error = "Error al iniciar sesión: " + ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    public class LoginRequest
    {
        [System.ComponentModel.DataAnnotations.Required]
        public string Dni { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required]
        public string Password { get; set; } = string.Empty;
    }
}
