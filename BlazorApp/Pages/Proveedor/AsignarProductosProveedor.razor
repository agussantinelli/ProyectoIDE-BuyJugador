@page "/proveedor/{IdProveedor:int}/asignar-productos"
@attribute [Authorize]

@using ApiClient
@using DTOs
@using System.Net.Http
@inject ProveedorApiClient proveedorApiClient
@inject ProductoApiClient productoApiClient
@inject ProductoProveedorApiClient productoProveedorApiClient
@inject PrecioCompraApiClient precioCompraApiClient
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<link href="/css/Form.css" rel="stylesheet" />
<link href="css/Table.css" rel="stylesheet" />
<link href="/Pages/Proveedor/AsignarProductosProveedor.razor.css" rel="stylesheet" />

@if (isLoading)
{
    <div class="tbl-state">
        <i class="bi bi-arrow-repeat spin"></i> Cargando datos de asignación...
    </div>
}
else if (proveedor != null)
{
    <div class="form-container">
        <h2 class="form-title">Asignar Productos a @proveedor.RazonSocial</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
            </div>
        }

        <div class="assignment-container">
            <div class="product-column">
                <h3 class="column-title">Productos Disponibles</h3>
                <div class="tbl-wrapper">
                    <table class="tbl">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th class="tbl-text-end">Acción</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var producto in productosDisponibles)
                            {
                                <tr>
                                    <td class="tbl-truncate">@producto.Nombre</td>
                                    <td class="tbl-text-end">
                                        <button class="btn btn-sm btn-success" @onclick="() => IniciarAsignacion(producto)">
                                            <i class="bi bi-arrow-right-circle"></i> Asignar
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="product-column">
                <h3 class="column-title">Productos Asignados</h3>
                <div class="tbl-wrapper">
                    <table class="tbl">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th class="tbl-text-end">Precio Compra</th>
                                <th class="tbl-text-end">Acción</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var producto in productosAsignados)
                            {
                                <tr>
                                    <td class="tbl-truncate">@producto.Nombre</td>
                                    <td class="tbl-text-end">@producto.PrecioCompra.ToString("C2")</td>
                                    <td class="tbl-text-end">
                                        <button class="btn btn-sm btn-danger" @onclick="() => QuitarProducto(producto)">
                                            <i class="bi bi-arrow-left-circle"></i> Quitar
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="form-actions mt-4">
            <button class="btn btn-primary" @onclick="GuardarCambios" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> Guardando...</span>
                }
                else
                {
                    <i class="bi bi-save"></i>
                    <span> Guardar Cambios</span>
                }
            </button>
            <button class="btn btn-secondary" @onclick="VolverAProveedores" disabled="@isSaving">
                <i class="bi bi-x-circle"></i> Cancelar
            </button>
        </div>
    </div>
}
else
{
    <div class="alert alert-danger">Proveedor no encontrado.</div>
    <div class="form-actions mt-3">
        <button class="btn btn-secondary" @onclick="VolverAProveedores">
            <i class="bi bi-arrow-left"></i> Volver
        </button>
    </div>
}

<AsignarPrecioModal IsVisible="isPrecioModalVisible"
                    OnCancel="CancelarAsignacion"
                    OnConfirm="ConfirmarAsignacion"
                    ProductoNombre="@productoParaAsignar?.Nombre"
                    ProveedorNombre="@proveedor?.RazonSocial" />

@code {
    [Parameter]
    public int IdProveedor { get; set; }

    private ProveedorDTO? proveedor;
    private List<ProductoDisponibleRow> productosDisponibles = new();
    private List<ProductoAsignadoRow> productosAsignados = new();
    private HashSet<int> _initialAssignedIds = new();

    private bool isLoading = true;
    private bool isSaving = false;
    private string? errorMessage;

    private bool isPrecioModalVisible = false;
    private ProductoDisponibleRow? productoParaAsignar;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var proveedorTask = proveedorApiClient.GetByIdAsync(IdProveedor);
            var todosLosProductosTask = productoApiClient.GetAllAsync();
            var productosAsignadosTask = productoProveedorApiClient.GetProductosAsignadosByProveedorIdAsync(IdProveedor);

            await Task.WhenAll(proveedorTask, todosLosProductosTask, productosAsignadosTask);

            proveedor = proveedorTask.Result;
            if (proveedor == null)
            {
                errorMessage = "Proveedor no encontrado.";
                return;
            }

            var todosLosProductos = todosLosProductosTask.Result ?? new();
            var productosAsignadosConPrecio = productosAsignadosTask.Result ?? new();

            _initialAssignedIds = new HashSet<int>(productosAsignadosConPrecio.Select(p => p.IdProducto));

            productosDisponibles = todosLosProductos
                .Where(p => !_initialAssignedIds.Contains(p.IdProducto))
                .Select(p => new ProductoDisponibleRow { IdProducto = p.IdProducto, Nombre = p.Nombre })
                .ToList();

            productosAsignados = productosAsignadosConPrecio
                .Select(p => new ProductoAsignadoRow { IdProducto = p.IdProducto, Nombre = p.Nombre, PrecioCompra = p.PrecioCompra })
                .ToList();
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Error de red o API al cargar datos: {httpEx.StatusCode} - {httpEx.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado al cargar datos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void IniciarAsignacion(ProductoDisponibleRow producto)
    {
        productoParaAsignar = producto;
        isPrecioModalVisible = true;
    }

    private void ConfirmarAsignacion(decimal precio)
    {
        if (productoParaAsignar != null)
        {
            productosDisponibles.Remove(productoParaAsignar);
            productosAsignados.Add(new ProductoAsignadoRow
            {
                IdProducto = productoParaAsignar.IdProducto,
                Nombre = productoParaAsignar.Nombre,
                PrecioCompra = precio
            });
            StateHasChanged();
        }
        CancelarAsignacion();
    }

    private void CancelarAsignacion()
    {
        isPrecioModalVisible = false;
        productoParaAsignar = null;
    }

    private void QuitarProducto(ProductoAsignadoRow producto)
    {
        productosAsignados.Remove(producto);
        productosDisponibles.Add(new ProductoDisponibleRow
        {
            IdProducto = producto.IdProducto,
            Nombre = producto.Nombre
        });
        StateHasChanged();
    }

    private async Task GuardarCambios()
    {
        isSaving = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var finalAssignedIds = new HashSet<int>(productosAsignados.Select(p => p.IdProducto));

            var idsToRemove = _initialAssignedIds.Except(finalAssignedIds).ToList();
            foreach (var idProducto in idsToRemove)
            {
                await productoProveedorApiClient.DeleteAsync(idProducto, IdProveedor);
            }

            var idsToAdd = finalAssignedIds.Except(_initialAssignedIds).ToList();
            foreach (var idProducto in idsToAdd)
            {
                var productoAsignado = productosAsignados.First(p => p.IdProducto == idProducto);
                await productoProveedorApiClient.CreateAsync(new ProductoProveedorDTO { IdProducto = idProducto, IdProveedor = IdProveedor });
                await precioCompraApiClient.CreateAsync(new PrecioCompraDTO { IdProducto = idProducto, IdProveedor = IdProveedor, Monto = productoAsignado.PrecioCompra });
            }

            var idsToUpdate = _initialAssignedIds.Intersect(finalAssignedIds).ToList();
            foreach (var idProducto in idsToUpdate)
            {
                var productoEnUI = productosAsignados.FirstOrDefault(p => p.IdProducto == idProducto);
                var precioExistente = await precioCompraApiClient.GetByIdAsync(idProducto, IdProveedor);

                if (productoEnUI != null)
                {
                    if (precioExistente != null)
                    {
                        if (precioExistente.Monto != productoEnUI.PrecioCompra)
                        {
                            await precioCompraApiClient.UpdateAsync(idProducto, IdProveedor, new PrecioCompraDTO { Monto = productoEnUI.PrecioCompra });
                        }
                    }
                    else
                    {
                        await precioCompraApiClient.CreateAsync(new PrecioCompraDTO { IdProducto = idProducto, IdProveedor = IdProveedor, Monto = productoEnUI.PrecioCompra });
                    }
                }
            }

            await JSRuntime.InvokeVoidAsync("alert", "✅ Cambios guardados exitosamente.");
            navigationManager.NavigateTo("/proveedor");
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Error de red o API al guardar: {httpEx.StatusCode} - {httpEx.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado al guardar cambios: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void VolverAProveedores()
    {
        navigationManager.NavigateTo("/proveedor");
    }

    private class ProductoDisponibleRow
    {
        public int IdProducto { get; set; }
        public string Nombre { get; set; } = string.Empty;
    }

    private class ProductoAsignadoRow
    {
        public int IdProducto { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public decimal PrecioCompra { get; set; }
    }
}

