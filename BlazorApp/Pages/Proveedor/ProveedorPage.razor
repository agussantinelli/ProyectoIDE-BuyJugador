@page "/proveedor"
@attribute [Authorize]

@using ApiClient
@using DTOs
@using BlazorApp.Auth
@inject ProveedorApiClient proveedorApiClient
@inject ProvinciaApiClient provinciaApiClient
@inject LocalidadApiClient localidadApiClient
@inject NavigationManager navigationManager
@inject UserSessionService userSession

<link href="css/Table.css" rel="stylesheet" />
<link href="css/ProveedorPage.razor.css" rel="stylesheet" />

@if (!string.IsNullOrEmpty(_mensaje))
{
    <div class="alert @(_esError ? "alert-danger" : "alert-success")" role="alert">
        @_mensaje
        <button type="button" class="btn-close" @onclick="() => _mensaje = null" aria-label="Close"></button>
    </div>
}

<div class="tbl-container">
    <div class="tbl-header">
        <h2 class="tbl-title">Gestión de Proveedores</h2>
        <div class="tbl-search">
            <span class="bi bi-search tbl-search-icon"></span>
            <input class="tbl-input" type="text" placeholder="Buscar proveedor..."
                   @bind="textoFiltro" @bind:event="oninput" />
            @if (esAdmin)
            {
                <button class="btn btn-primary" @onclick="NuevoProveedor">
                    <i class="bi bi-plus-circle"></i>
                    <span>Nuevo</span>
                </button>
            }
        </div>
    </div>

    @if (isLoading)
    {
        <div class="tbl-state">
            <i class="bi bi-arrow-repeat spin"></i> Cargando proveedores...
        </div>
    }
    else
    {
        <div class="view-selector mb-3">
            <button class="btn @(mostrarActivos ? "btn-primary" : "btn-secondary")" @onclick="() => CambiarTab(true)">
                <i class="bi bi-check-circle"></i> Activos (@(activos?.Count ?? 0))
            </button>
            @if (esAdmin)
            {
                <button class="btn @(!mostrarActivos ? "btn-primary" : "btn-secondary")" @onclick="() => CambiarTab(false)">
                    <i class="bi bi-archive"></i> Inactivos (@(inactivos?.Count ?? 0))
                </button>
            }
        </div>

        <div class="tbl-wrapper">
            <table class="tbl table-striped table-hover">
                <thead>
                    <tr>
                        <th>Razón Social</th>
                        <th class="col-cuit">CUIT</th>
                        <th>Email</th>
                        <th class="col-localidad">Localidad</th>
                        <th>Provincia</th>
                        <th class="tbl-text-end">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in ProveedoresFiltrados)
                    {
                        <tr>
                            <td>@p.RazonSocial</td>
                            <td class="col-cuit">@p.Cuit</td>
                            <td>@p.Email</td>
                            <td class="tbl-muted col-localidad">@p.LocalidadNombre</td>
                            <td class="tbl-muted">@p.ProvinciaNombre</td>
                            <td class="tbl-text-end">
                                <div class="tbl-actions">
                                    @if (mostrarActivos)
                                    {
                                        <button class="tbl-icon-btn" title="Ver Productos" @onclick="() => VerProductos(p)">
                                            <i class="bi bi-box-seam"></i>
                                        </button>
                                        <button class="tbl-icon-btn" title="Asignar Productos" @onclick="() => AsignarProductos(p)">
                                            <i class="bi bi-cart-plus"></i>
                                        </button>

                                        @if (esAdmin)
                                        {
                                            <button class="tbl-icon-btn" title="Editar" @onclick="() => Editar(p)">
                                                <i class="bi bi-pencil-square"></i>
                                            </button>
                                            <button class="tbl-icon-btn tbl-icon-btn--danger" title="Dar de baja" @onclick="() => AbrirModalConfirmacion(p)">
                                                <i class="bi bi-trash3"></i>
                                            </button>
                                        }
                                    }
                                    else
                                    {
                                        @if (esAdmin)
                                        {
                                            <button class="tbl-icon-btn tbl-icon-btn--success" title="Reactivar" @onclick="() => Reactivar(p)">
                                                <i class="bi bi-arrow-clockwise"></i>
                                            </button>
                                        }
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<ConfirmationModal Title="Confirmar Baja"
                   IsVisible="_mostrarModalConfirmacion"
                   OnConfirm="EliminarConfirmado"
                   OnCancel="CerrarModalConfirmacion"
                   IsProcessing="_isEliminando"
                   ConfirmButtonText="Dar de Baja">
    @if (_proveedorParaEliminar != null)
    {
        <p>¿Estás seguro de que deseas dar de baja al proveedor <strong>@_proveedorParaEliminar.RazonSocial</strong>?</p>
    }
</ConfirmationModal>

@code {
    private List<ProveedorDTO>? activos;
    private List<ProveedorDTO>? inactivos;
    private List<ProvinciaDTO> provincias = new();
    private List<LocalidadDTO> localidades = new();

    private bool mostrarActivos = true;
    private string textoFiltro = string.Empty;
    private bool isLoading = true;
    private bool esAdmin;
    private string? _mensaje;
    private bool _esError;

    private bool _mostrarModalConfirmacion = false;
    private bool _isEliminando = false;
    private ProveedorDTO? _proveedorParaEliminar;

    protected override async Task OnInitializedAsync()
    {
        esAdmin = await userSession.EsAdminAsync();
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        isLoading = true;
        _mensaje = null;
        try
        {
            var activosTask = proveedorApiClient.GetAllAsync();
            var inactivosTask = esAdmin ? proveedorApiClient.GetInactivosAsync() : Task.FromResult<List<ProveedorDTO>?>(new());
            var provinciasTask = provinciaApiClient.GetAllAsync();
            var localidadesTask = localidadApiClient.GetAllAsync();

            await Task.WhenAll(activosTask, inactivosTask, provinciasTask, localidadesTask);

            var activosDto = activosTask.Result ?? new();
            var inactivosDto = inactivosTask.Result ?? new();
            provincias = provinciasTask.Result ?? new();
            localidades = localidadesTask.Result ?? new();

            EnriquecerUbicacion(activosDto, localidades, provincias);
            EnriquecerUbicacion(inactivosDto, localidades, provincias);

            activos = activosDto;
            inactivos = inactivosDto;
        }
        catch (Exception ex)
        {
            _mensaje = $"Error al cargar los datos: {ex.Message}";
            _esError = true;
            activos = new();
            inactivos = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private static void EnriquecerUbicacion(List<ProveedorDTO> lista, List<LocalidadDTO> locs, List<ProvinciaDTO> provs)
    {
        foreach (var p in lista)
        {
            var loc = locs.FirstOrDefault(l => l.IdLocalidad == p.IdLocalidad);
            p.LocalidadNombre = loc?.Nombre;
            p.ProvinciaNombre = provs.FirstOrDefault(pr => pr.IdProvincia == (loc?.IdProvincia ?? 0))?.Nombre;
        }
    }

    private IEnumerable<ProveedorDTO> ProveedoresFiltrados =>
        (mostrarActivos ? activos : inactivos)?
        .Where(p =>
            string.IsNullOrWhiteSpace(textoFiltro)
            || (p.RazonSocial?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
            || (p.Cuit?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
            || (p.Email?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
            || (p.LocalidadNombre?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
            || (p.ProvinciaNombre?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
        ) ?? Enumerable.Empty<ProveedorDTO>();

    private void CambiarTab(bool esActivo) => mostrarActivos = esActivo;

    private void AbrirModalConfirmacion(ProveedorDTO proveedor)
    {
        _proveedorParaEliminar = proveedor;
        _mostrarModalConfirmacion = true;
        StateHasChanged();
    }

    private void CerrarModalConfirmacion()
    {
        if (_isEliminando) return;
        _mostrarModalConfirmacion = false;
        _proveedorParaEliminar = null;
        StateHasChanged();
    }

    private async Task EliminarConfirmado()
    {
        if (_proveedorParaEliminar == null) return;

        _isEliminando = true;
        _mensaje = null;

        try
        {
            var resp = await proveedorApiClient.DeleteAsync(_proveedorParaEliminar.IdProveedor);
            if (resp.IsSuccessStatusCode)
            {
                _mensaje = "Proveedor dado de baja correctamente.";
                _esError = false;
                await CargarDatos();
            }
            else
            {
                var errorBody = await resp.Content.ReadAsStringAsync();
                throw new Exception(string.IsNullOrWhiteSpace(errorBody) ? resp.ReasonPhrase : errorBody);
            }
        }
        catch (Exception ex)
        {
            _mensaje = $"Error al dar de baja: {ex.Message}";
            _esError = true;
        }
        finally
        {
            _isEliminando = false;
            CerrarModalConfirmacion();
        }
    }

    private async Task Reactivar(ProveedorDTO proveedor)
    {
        _mensaje = null;
        try
        {
            var resp = await proveedorApiClient.ReactivarAsync(proveedor.IdProveedor);
            if (resp.IsSuccessStatusCode)
            {
                _mensaje = "Proveedor reactivado correctamente.";
                _esError = false;
                await CargarDatos();
            }
            else
            {
                var errorBody = await resp.Content.ReadAsStringAsync();
                throw new Exception(string.IsNullOrWhiteSpace(errorBody) ? resp.ReasonPhrase : errorBody);
            }
        }
        catch (Exception ex)
        {
            _mensaje = $"Error al reactivar: {ex.Message}";
            _esError = true;
        }
    }

    private void VerProductos(ProveedorDTO proveedor) =>
        navigationManager.NavigateTo($"/proveedor/{proveedor.IdProveedor}/productos");

    private void AsignarProductos(ProveedorDTO proveedor) =>
        navigationManager.NavigateTo($"/proveedor/{proveedor.IdProveedor}/asignar-productos");

    private void NuevoProveedor() => navigationManager.NavigateTo("/proveedor/nuevo");
    private void Editar(ProveedorDTO proveedor) => navigationManager.NavigateTo($"/proveedor/editar/{proveedor.IdProveedor}");
}
