@page "/proveedor/nuevo"
@attribute [Authorize]

@using ApiClient
@using DTOs
@inject ProveedorApiClient proveedorApiClient
@inject ProvinciaApiClient provinciaApiClient
@inject LocalidadApiClient localidadApiClient
@inject NavigationManager navigationManager

<link href="/css/Form.css" rel="stylesheet" />

<div class="form-container">
    <EditForm Model="@proveedor" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <h3 class="form-title">Nuevo Proveedor</h3>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label>Razón Social</label>
                    <InputText class="form-control" @bind-Value="proveedor.RazonSocial" />
                    <ValidationMessage For="@(() => proveedor.RazonSocial)" />
                </div>
                <div class="form-group">
                    <label>CUIT</label>
                    <InputText class="form-control" @bind-Value="proveedor.Cuit" />
                    <ValidationMessage For="@(() => proveedor.Cuit)" />
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <InputText type="email" class="form-control" @bind-Value="proveedor.Email" />
                    <ValidationMessage For="@(() => proveedor.Email)" />
                </div>
                <div class="form-group">
                    <label>Teléfono</label>
                    <InputText class="form-control" @bind-Value="proveedor.Telefono" />
                    <ValidationMessage For="@(() => proveedor.Telefono)" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label>Dirección</label>
                    <InputText class="form-control" @bind-Value="proveedor.Direccion" />
                    <ValidationMessage For="@(() => proveedor.Direccion)" />
                </div>
                <div class="form-group">
                    <label>Provincia</label>
                    <InputSelect class="form-control" Value="provinciaSeleccionadaIdString" ValueExpression="@(() => provinciaSeleccionadaIdString)" ValueChanged="@((string? value) => OnProvinciaChanged(value))">
                        <option value="">Seleccione una provincia...</option>
                        @foreach (var provincia in provincias)
                        {
                            <option value="@provincia.IdProvincia">@provincia.Nombre</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label>Localidad</label>
                    <InputSelect class="form-control" @bind-Value="LocalidadIdString" disabled="@(localidadesFiltradas.Count == 0)">
                        <option value="">Seleccione una localidad...</option>
                        @foreach (var localidad in localidadesFiltradas)
                        {
                            <option value="@localidad.IdLocalidad">@localidad.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => proveedor.IdLocalidad)" />
                </div>
            </div>
        </div>

        <div class="form-actions">
            <button type="button" class="btn btn-secondary" @onclick="Volver">
                <i class="bi bi-arrow-left-circle"></i> Volver
            </button>
            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> Guardando...</span>
                }
                else
                {
                    <span><i class="bi bi-check-circle"></i> Guardar</span>
                }
            </button>
        </div>
    </EditForm>
</div>


@code {
    private ProveedorDTO proveedor = new ProveedorDTO();
    private List<ProvinciaDTO> provincias = new();
    private List<LocalidadDTO> todasLasLocalidades = new();
    private List<LocalidadDTO> localidadesFiltradas = new();

    private string? errorMessage;
    private bool isLoading = true;
    private bool isSaving = false;

    private string? provinciaSeleccionadaIdString;

    private string? LocalidadIdString
    {
        get => proveedor.IdLocalidad?.ToString();
        set
        {
            if (int.TryParse(value, out var id))
            {
                proveedor.IdLocalidad = id;
            }
            else
            {
                proveedor.IdLocalidad = null;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialDataAsync();
    }

    private async Task LoadInitialDataAsync()
    {
        isLoading = true;
        try
        {
            var provinciasTask = provinciaApiClient.GetAllAsync();
            var localidadesTask = localidadApiClient.GetAllAsync();

            await Task.WhenAll(provinciasTask, localidadesTask);

            provincias = provinciasTask.Result ?? new List<ProvinciaDTO>();
            todasLasLocalidades = localidadesTask.Result ?? new List<LocalidadDTO>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar datos iniciales: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnProvinciaChanged(string? value)
    {
        provinciaSeleccionadaIdString = value;
        proveedor.IdLocalidad = null;

        if (int.TryParse(provinciaSeleccionadaIdString, out var idProvincia))
        {
            localidadesFiltradas = todasLasLocalidades
                .Where(l => l.IdProvincia == idProvincia)
                .OrderBy(l => l.Nombre)
                .ToList();
        }
        else
        {
            localidadesFiltradas.Clear();
        }

    }

    private async Task HandleValidSubmit()
    {
        isSaving = true;
        errorMessage = null;

        try
        {
            var response = await proveedorApiClient.CreateAsync(proveedor);
            if (response.IsSuccessStatusCode)
            {
                navigationManager.NavigateTo("/proveedor");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al crear el proveedor: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error de conexión al intentar crear el proveedor: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Volver()
    {
        navigationManager.NavigateTo("/proveedor");
    }
}

