@page "/producto/editar/{Id:int}"
@attribute [Authorize]

@using ApiClient
@using DTOs
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject ProductoApiClient ProductoApi
@inject TipoProductoApiClient TipoApi
@inject NavigationManager Nav
@inject IJSRuntime JS

<link href="css/Form.css" rel="stylesheet" />
<link href="css/Table.css" rel="stylesheet" />


<div class="form-container producto-form">
    @if (isLoading)
    {
        <div class="tbl-state"><i class="bi bi-arrow-repeat spin"></i> Cargando...</div>
    }
    else if (Model is null)
    {
        <div class="tbl-state"><i class="bi bi-inbox"></i> No se encontró el producto.</div>
    }
    else
    {
        <div class="form-header">
            <h3 class="form-title">Editando: @Model.Nombre</h3>
            <button class="btn btn-secondary" @onclick="Volver">
                <i class="bi bi-arrow-left"></i><span>Volver</span>
            </button>
        </div>

        <EditForm EditContext="@editContext" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="nombre">Nombre</label>
                <InputText id="nombre" class="form-control" @bind-Value="Model.Nombre" />
                <ValidationMessage class="validation-message" For="@(() => Model.Nombre)" />
            </div>

            <div class="form-group">
                <label for="desc">Descripción</label>
                <InputText id="desc" class="form-control" @bind-Value="Model.Descripcion" />
                <ValidationMessage class="validation-message" For="@(() => Model.Descripcion)" />
            </div>

            <div class="inline-2">
                <div class="form-group">
                    <label for="tipo">Tipo de producto</label>
                    <InputSelect id="tipo" class="form-select" @bind-Value="Model.IdTipoProducto">
                        <option value="">-- Seleccionar --</option>
                        @foreach (var t in Tipos)
                        {
                            <option value="@t.IdTipoProducto">@t.Descripcion</option>
                        }
                    </InputSelect>
                    <ValidationMessage class="validation-message" For="@(() => Model.IdTipoProducto)" />
                </div>

                <div class="form-group">
                    <label for="stock">Stock</label>
                    <InputNumber id="stock" class="form-control" @bind-Value="Model.Stock" />
                    <ValidationMessage class="validation-message" For="@(() => Model.Stock)" />
                </div>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                    <i class="bi bi-save"></i><span>@(isSaving ? "Guardando..." : "Guardar cambios")</span>
                </button>
                <button type="button" class="btn btn-outline-secondary" @onclick="Volver" disabled="@isSaving">
                    <i class="bi bi-x-circle"></i><span>Cancelar</span>
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }

    private class ProductoEditVM
    {
        public int IdProducto { get; set; }

        [Required, StringLength(100)]
        public string? Nombre { get; set; }

        [StringLength(255)]
        public string? Descripcion { get; set; }

        [Required(ErrorMessage = "Seleccione un tipo")]
        public int? IdTipoProducto { get; set; }

        [Range(0, int.MaxValue)]
        public int Stock { get; set; }
    }

    private ProductoEditVM? Model;
    private EditContext? editContext;
    private bool isLoading = true;
    private bool isSaving = false;
    private List<TipoProductoDTO> Tipos = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var dto = await ProductoApi.GetByIdAsync(Id);
            Tipos = await TipoApi.GetAllAsync() ?? new();

            if (dto is null)
            {
                Model = null;
                return;
            }

            Model = new ProductoEditVM
            {
                IdProducto = dto.IdProducto,
                Nombre = dto.Nombre,
                Descripcion = dto.Descripcion,
                IdTipoProducto = dto.IdTipoProducto,
                Stock = dto.Stock
            };
            editContext = new EditContext(Model);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Guardar()
    {
        if (Model is null) return;
        if (!await JS.InvokeAsync<bool>("confirm", "⚠️ Se guardarán los cambios.\n¿Desea continuar?")) return;

        isSaving = true;
        try
        {
            var dto = new ProductoDTO
            {
                IdProducto = Model.IdProducto,
                Nombre = Model.Nombre!,
                Descripcion = Model.Descripcion,
                IdTipoProducto = Model.IdTipoProducto,
                Stock = Model.Stock
            };

            var resp = await ProductoApi.UpdateAsync(Model.IdProducto, dto);
            if (resp.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "✅ Cambios guardados.");
                Nav.NavigateTo("/producto");
            }
            else
            {
                var msg = await resp.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"❌ Error: {msg}");
            }
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Volver() => Nav.NavigateTo("/producto");
}
