@page "/producto"
@attribute [Authorize]

@using ApiClient
@using DTOs
@inject ProductoApiClient productoApiClient

<link href="css/Table.css" rel="stylesheet" />

<div class="tbl-container">
    <div class="tbl-header">
        <h2 class="tbl-title">Gestión de Productos</h2>

        <div class="tbl-search">
            <span class="bi bi-search tbl-search-icon" aria-hidden="true"></span>
            <input class="tbl-input" type="text" placeholder="Buscar producto..."
                   @bind="TextoBusqueda" @bind:event="oninput" />
            <button class="btn btn-primary" @onclick="NuevoProducto">
                <i class="bi bi-plus-circle"></i>
                <span>Nuevo</span>
            </button>
        </div>
    </div>

    <div class="view-selector mb-3">
        <button class="btn @(vistaActual == Vista.Activos ? "btn-primary" : "btn-secondary")" @onclick="() => CambiarVista(Vista.Activos)">
            <i class="bi bi-check-circle"></i> Activos (@(productosActivos?.Count ?? 0))
        </button>
        <button class="btn @(vistaActual == Vista.Inactivos ? "btn-primary" : "btn-secondary")" @onclick="() => CambiarVista(Vista.Inactivos)">
            <i class="bi bi-archive"></i> Inactivos (@(productosInactivos?.Count ?? 0))
        </button>
    </div>

    @if (productosFiltrados is null)
    {
        <div class="tbl-state">
            <i class="bi bi-arrow-repeat spin"></i> Cargando productos...
        </div>
    }
    else if (!productosFiltrados.Any())
    {
        <div class="tbl-state">
            <i class="bi bi-inbox"></i> No se encontraron productos.
        </div>
    }
    else
    {
        <div class="tbl-wrapper productos-wrapper">
            <table class="tbl table-striped table-hover productos-table">
                <thead>
                    <tr>
                        <th class="col-nombre">Nombre</th>
                        <th class="col-desc">Descripción</th>
                        <th class="col-tipo">Tipo</th>
                        <th class="tbl-text-end col-precio">Precio</th>
                        <th class="tbl-text-end col-stock">Stock</th>
                        <th class="col-acciones">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in productosFiltrados)
                    {
                        <tr>
                            <td class="tbl-truncate">@p.Nombre</td>
                            <td class="tbl-muted tbl-truncate">@p.Descripcion</td>
                            <td class="tbl-truncate">@p.TipoProductoDescripcion</td>
                            <td class="tbl-text-end">@FormatCurrency(p.PrecioActual ?? 0m)</td>
                            <td class="tbl-text-end">@p.Stock</td>
                            <td class="col-acciones">
                                <div class="tbl-actions">
                                    @if (vistaActual == Vista.Activos)
                                    {
                                        <button class="tbl-icon-btn" title="Ver detalle" @onclick="() => VerDetalle(p)">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button class="tbl-icon-btn" title="Editar" @onclick="() => Editar(p)">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                        <button class="tbl-icon-btn tbl-icon-btn--danger" title="Dar de Baja" @onclick="() => DarDeBaja(p)">
                                            <i class="bi bi-trash3"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="tbl-icon-btn tbl-icon-btn--success" title="Reactivar" @onclick="() => Reactivar(p)">
                                            <i class="bi bi-arrow-clockwise"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private enum Vista { Activos, Inactivos }
    private Vista vistaActual = Vista.Activos;

    private List<ProductoDTO>? productosActivos;
    private List<ProductoDTO>? productosInactivos;
    private List<ProductoDTO>? productosFiltrados;

    private string _textoBusqueda = string.Empty;
    private string TextoBusqueda
    {
        get => _textoBusqueda;
        set
        {
            _textoBusqueda = value ?? string.Empty;
            AplicarFiltro();
        }
    }

    private string FormatCurrency(decimal amount) => amount.ToString("C");

    protected override async Task OnInitializedAsync()
    {
        await CargarTodosProductos();
    }

    private async Task CargarTodosProductos()
    {
        productosFiltrados = null;
        var activosTask = productoApiClient.GetAllAsync();
        var inactivosTask = productoApiClient.GetAllInactivosAsync();

        await Task.WhenAll(activosTask, inactivosTask);

        productosActivos = await activosTask ?? new();
        productosInactivos = await inactivosTask ?? new();

        AplicarFiltro();
    }

    private void AplicarFiltro()
    {
        var fuente = vistaActual == Vista.Activos ? productosActivos : productosInactivos;

        if (string.IsNullOrWhiteSpace(_textoBusqueda))
        {
            productosFiltrados = fuente;
            return;
        }

        var f = _textoBusqueda.Trim();
        productosFiltrados = fuente?
            .Where(p =>
                (p.Nombre ?? "").Contains(f, StringComparison.OrdinalIgnoreCase) ||
                (p.Descripcion ?? "").Contains(f, StringComparison.OrdinalIgnoreCase) ||
                (p.TipoProductoDescripcion ?? "").Contains(f, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void CambiarVista(Vista nuevaVista)
    {
        vistaActual = nuevaVista;
        AplicarFiltro();
    }

    private async Task DarDeBaja(ProductoDTO p)
    {
        var response = await productoApiClient.DeleteAsync(p.IdProducto);
        if (response.IsSuccessStatusCode) await CargarTodosProductos();
    }

    private async Task Reactivar(ProductoDTO p)
    {
        var response = await productoApiClient.ReactivarAsync(p.IdProducto);
        if (response.IsSuccessStatusCode) await CargarTodosProductos();
    }

    private void NuevoProducto() => Console.WriteLine("Nuevo producto");
    private void VerDetalle(ProductoDTO p) => Console.WriteLine($"Ver {p.Nombre}");
    private void Editar(ProductoDTO p) => Console.WriteLine($"Editar {p.Nombre}");
}
