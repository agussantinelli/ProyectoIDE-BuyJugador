@page "/producto"
@attribute [Authorize]

@using ApiClient
@using DTOs
@using BlazorApp.Auth
@inject ProductoApiClient productoApiClient
@inject NavigationManager navigationManager
@inject UserSessionService userSession

<div class="tbl-container">
    <div class="tbl-header">
        <h2 class="tbl-title">Gestión de Productos</h2>
        <div class="tbl-search">
            <span class="bi bi-search tbl-search-icon"></span>
            <input class="tbl-input" type="text" placeholder="Buscar producto..."
                   @bind="textoFiltro" @bind:event="oninput" />

            @if (esAdmin)
            {
                <button class="btn btn-outline-secondary" @onclick="IrAGestionPrecios">
                    <i class="bi bi-tags"></i> Gestionar Precios de Venta
                </button>
            }

            <button class="btn btn-primary" @onclick="NuevoProducto">
                <i class="bi bi-plus-circle"></i>
                <span>Nuevo</span>
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="tbl-state">
            <i class="bi bi-arrow-repeat spin"></i> Cargando productos...
        </div>
    }
    else
    {
        <div class="view-selector mb-3">
            <button class="btn @(mostrarActivos ? "btn-primary" : "btn-secondary")" @onclick="() => CambiarTab(true)">
                <i class="bi bi-check-circle"></i> Activos (@(activos?.Count ?? 0))
            </button>
            @if (esAdmin)
            {
                <button class="btn @(!mostrarActivos ? "btn-primary" : "btn-secondary")" @onclick="() => CambiarTab(false)">
                    <i class="bi bi-archive"></i> Inactivos (@(inactivos?.Count ?? 0))
                </button>
            }
        </div>

        <div class="tbl-wrapper">
            <table class="tbl table-striped table-hover">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Descripción</th>
                        <th class="col-tipo">Tipo Producto</th>
                        <th class="col-stock tbl-text-end">Stock</th>
                        <th class="tbl-text-end">Precio Venta</th>
                        <th class="tbl-text-end">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in ProductosFiltrados)
                    {
                        <tr>
                            <td>@p.Nombre</td>
                            <td class="tbl-truncate">@p.Descripcion</td>
                            <td class="tbl-muted col-tipo">@p.TipoProductoDescripcion</td>
                            <td class="tbl-muted col-stock tbl-text-end">@p.Stock</td>
                            <td class="tbl-muted tbl-text-end">
                                @(p.PrecioActual.HasValue? p.PrecioActual.Value.ToString("C") : "N/A")
                            </td>
                            <td class="tbl-text-end">
                                <div class="tbl-actions">
                                    @if (mostrarActivos)
                                    {
                                        <button class="tbl-icon-btn" title="Editar" @onclick="() => Editar(p)">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                        <button class="tbl-icon-btn" title="Ver Proveedores">
                                            <i class="bi bi-building"></i>
                                        </button>
                                        @if (esAdmin)
                                        {
                                            <button class="tbl-icon-btn tbl-icon-btn--danger" title="Dar de baja" @onclick="() => Eliminar(p)">
                                                <i class="bi bi-trash3"></i>
                                            </button>
                                        }
                                    }
                                    else
                                    {
                                        @if (esAdmin)
                                        {
                                            <button class="tbl-icon-btn tbl-icon-btn--success" title="Reactivar" @onclick="() => Reactivar(p)">
                                                <i class="bi bi-arrow-clockwise"></i>
                                            </button>
                                        }
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<ProductoDTO>? activos;
    private List<ProductoDTO>? inactivos;
    private bool mostrarActivos = true;
    private string textoFiltro = string.Empty;
    private bool isLoading = true;
    private bool esAdmin;

    protected override async Task OnInitializedAsync()
    {
        esAdmin = await userSession.EsAdminAsync();
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        isLoading = true;
        try
        {
            var activosTask = productoApiClient.GetAllAsync();
            var inactivosTask = esAdmin ? productoApiClient.GetAllInactivosAsync() : Task.FromResult<List<ProductoDTO>?>(new());

            await Task.WhenAll(activosTask, inactivosTask);

            activos = activosTask.Result ?? new();
            inactivos = inactivosTask.Result ?? new();
        }
        catch
        {
            activos = new();
            inactivos = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<ProductoDTO> ProductosFiltrados =>
        (mostrarActivos ? activos : inactivos)?
        .Where(p =>
            string.IsNullOrWhiteSpace(textoFiltro)
            || (p.Nombre?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
            || (p.Descripcion?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
            || (p.TipoProductoDescripcion?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false)
        ) ?? Enumerable.Empty<ProductoDTO>();

    private void CambiarTab(bool esActivo)
    {
        mostrarActivos = esActivo;
    }

    private async Task Eliminar(ProductoDTO producto)
    {
        var resp = await productoApiClient.DeleteAsync(producto.IdProducto);
        if (resp.IsSuccessStatusCode) await CargarDatos();
    }

    private async Task Reactivar(ProductoDTO producto)
    {
        var resp = await productoApiClient.ReactivarAsync(producto.IdProducto);
        if (resp.IsSuccessStatusCode) await CargarDatos();
    }

    private void NuevoProducto() => navigationManager.NavigateTo("/producto/nuevo");
    private void Editar(ProductoDTO producto) => navigationManager.NavigateTo($"/producto/editar/{producto.IdProducto}");

    private void IrAGestionPrecios()
    {
        navigationManager.NavigateTo("/reporte/precios");
    }
}
