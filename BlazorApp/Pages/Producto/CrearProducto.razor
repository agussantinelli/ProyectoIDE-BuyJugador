@page "/producto/crear"
@attribute [Authorize]

@using ApiClient
@using DTOs
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http
@using System.Net.Http.Json
@inject ProductoApiClient ProductoApi
@inject TipoProductoApiClient TipoApi
@inject PrecioVentaApiClient PrecioVentaApi
@inject NavigationManager Nav
@inject IJSRuntime JS

<link href="css/Table.css" rel="stylesheet" />
<link href="css/Form.css" rel="stylesheet" />

<div class="form-container producto-form">
    <div class="form-header">
        <h3 class="form-title">Nuevo Producto</h3>
        <button class="btn btn-secondary" @onclick="Volver">
            <i class="bi bi-arrow-left"></i><span>Volver</span>
        </button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
        </div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success" role="alert">
            @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = null" aria-label="Close"></button>
        </div>
    }


    @if (isLoading)
    {
        <div class="tbl-state"><i class="bi bi-arrow-repeat spin"></i> Cargando...</div>
    }
    else
    {
        <EditForm EditContext="@editContext" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="nombre">Nombre</label>
                <InputText id="nombre" class="form-control" @bind-Value="Model.Nombre" />
                <ValidationMessage class="validation-message" For="@(() => Model.Nombre)" />
            </div>

            <div class="form-group">
                <label for="desc">Descripción</label>
                <InputText id="desc" class="form-control" @bind-Value="Model.Descripcion" />
                <ValidationMessage class="validation-message" For="@(() => Model.Descripcion)" />
            </div>

            <div class="inline-3">
                <div class="form-group">
                    <label for="tipo">Tipo de producto</label>
                    <InputSelect id="tipo" class="form-select" @bind-Value="Model.IdTipoProducto">
                        <option value="">-- Seleccionar --</option>
                        @foreach (var t in Tipos)
                        {
                            <option value="@t.IdTipoProducto">@t.Descripcion</option>
                        }
                    </InputSelect>
                    <ValidationMessage class="validation-message" For="@(() => Model.IdTipoProducto)" />
                </div>

                <div class="form-group">
                    <label for="stock">Stock inicial</label>
                    <InputNumber id="stock" class="form-control" @bind-Value="Model.Stock" />
                    <ValidationMessage class="validation-message" For="@(() => Model.Stock)" />
                </div>

                <div class="form-group">
                    <label for="precio">Precio inicial</label>
                    <InputNumber id="precio" class="form-control" @bind-Value="Model.PrecioInicial" TValue="decimal?" ParsingErrorMessage="Ingrese un número válido" />
                    <ValidationMessage class="validation-message" For="@(() => Model.PrecioInicial)" />
                </div>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                    <i class="bi bi-save"></i><span>@(isSaving ? "Guardando..." : "Guardar")</span>
                </button>
                <button type="button" class="btn btn-outline-secondary" @onclick="Volver" disabled="@isSaving">
                    <i class="bi bi-x-circle"></i><span>Cancelar</span>
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    private class ProductoCreateVM
    {
        [Required, StringLength(100)]
        public string? Nombre { get; set; }

        [StringLength(255)]
        public string? Descripcion { get; set; }

        [Required(ErrorMessage = "Seleccione un tipo")]
        [Range(1, int.MaxValue, ErrorMessage = "Seleccione un tipo válido")]
        public int? IdTipoProducto { get; set; }

        [Range(0, int.MaxValue, ErrorMessage = "El stock no puede ser negativo")]
        public int Stock { get; set; } = 0;

        [Required(ErrorMessage = "El precio inicial es obligatorio")]
        [Range(0.01, (double)decimal.MaxValue, ErrorMessage = "El precio debe ser mayor a cero")]
        public decimal? PrecioInicial { get; set; }
    }

    private ProductoCreateVM Model = new();
    private EditContext? editContext;
    private bool isLoading = true;
    private bool isSaving = false;
    private List<TipoProductoDTO> Tipos = new();
    private string? errorMessage;
    private string? successMessage;


    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(Model);
        try
        {
            Tipos = await TipoApi.GetAllAsync() ?? new();
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Error de red o API al cargar tipos: {httpEx.StatusCode} - {httpEx.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado al cargar tipos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Guardar()
    {
        if (editContext == null || !editContext.Validate())
        {
            errorMessage = "Por favor, corrija los errores de validación.";
            successMessage = null;
            return;
        }

        isSaving = true;
        errorMessage = null;
        successMessage = null;
        StateHasChanged();

        HttpResponseMessage? responseProducto = null;
        ProductoDTO? nuevoProducto = null;


        try
        {
            var dto = new ProductoDTO
            {
                Nombre = Model.Nombre!.Trim(),
                Descripcion = string.IsNullOrWhiteSpace(Model.Descripcion) ? null : Model.Descripcion.Trim(),
                IdTipoProducto = Model.IdTipoProducto,
                Stock = Model.Stock
            };

            responseProducto = await ProductoApi.CreateAsync(dto);

            if (responseProducto.IsSuccessStatusCode)
            {
                try
                {
                    nuevoProducto = await responseProducto.Content.ReadFromJsonAsync<ProductoDTO>();
                }
                catch { }

                if (nuevoProducto == null)
                {
                    await Task.Delay(250);
                    var todos = await ProductoApi.GetAllAsync();
                    nuevoProducto = todos?.FirstOrDefault(p => p.Nombre == dto.Nombre && p.IdTipoProducto == dto.IdTipoProducto && p.Stock == dto.Stock);
                }


                if (nuevoProducto != null && nuevoProducto.IdProducto > 0)
                {
                    var precioDto = new PrecioVentaDTO
                    {
                        IdProducto = nuevoProducto.IdProducto,
                        Monto = Model.PrecioInicial!.Value,
                        FechaDesde = DateTime.Now
                    };

                    var responsePrecio = await PrecioVentaApi.CreateAsync(precioDto);

                    if (responsePrecio.IsSuccessStatusCode)
                    {
                        successMessage = "Producto y precio inicial creados correctamente. Redirigiendo...";
                        StateHasChanged();
                        await Task.Delay(2000);
                        Nav.NavigateTo("/producto");
                    }
                    else
                    {
                        var errorPrecio = await responsePrecio.Content.ReadAsStringAsync();
                        errorMessage = $"Producto creado (ID: {nuevoProducto.IdProducto}), pero falló al crear el precio inicial: {errorPrecio}. Puede agregarlo editando el producto.";

                    }
                }
                else
                {
                    errorMessage = "Producto creado, pero no se pudo obtener su ID para asignar el precio inicial. Edite el producto para agregar el precio.";

                }
            }
            else
            {
                var msg = await responseProducto.Content.ReadAsStringAsync();
                errorMessage = $"Error al crear el producto: {msg}";
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Error de red o API al guardar: {httpEx.StatusCode} - {httpEx.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado al guardar: {ex.Message}";
            if (responseProducto?.IsSuccessStatusCode == true && nuevoProducto == null)
            {
                errorMessage += " Se creó el producto, pero ocurrió un error antes de poder guardar el precio inicial. Edite el producto para agregarlo.";
            }
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void Volver() => Nav.NavigateTo("/producto");
}

