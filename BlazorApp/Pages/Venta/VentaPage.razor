@page "/venta"
@attribute [Authorize]

@using DTOs
@using ApiClient
@inject VentaApiClient ventaApiClient
@inject UserSessionService userSession
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<link href="css/Table.css" rel="stylesheet" />

<div class="tbl-container">
    <div class="tbl-header">
        <h2 class="tbl-title">Gestión de Ventas</h2>

        <div class="tbl-search">
            <span class="bi bi-search tbl-search-icon"></span>
            <input class="tbl-input" type="text" placeholder="Buscar vendedor..."
                   @bind="textoFiltro" @bind:event="oninput" />

            @if (esAdmin)
            {
                <button class="btn btn-primary" @onclick="NuevaVenta">
                    <i class="bi bi-plus-circle"></i>
                    <span>Nueva</span>
                </button>
            }
        </div>
    </div>

    @if (ventas == null)
    {
        <div class="tbl-state"><i class="bi bi-arrow-repeat spin"></i> Cargando ventas...</div>
    }
    else if (!VentasFiltradas.Any())
    {
        <div class="tbl-state"><i class="bi bi-inbox"></i> No se encontraron ventas.</div>
    }
    else
    {
        <div class="tbl-wrapper">
            <table class="tbl table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID Venta</th>
                        <th>Fecha</th>
                        <th>Vendedor</th>
                        <th>Estado</th>
                        <th class="tbl-text-end">Total</th>
                        <th class="tbl-text-end">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var v in VentasFiltradas)
                    {
                        bool estaPendiente = v.Estado?.Equals("Pendiente", StringComparison.OrdinalIgnoreCase) == true;

                        <tr>
                            <td>@v.IdVenta</td>
                            <td>@v.Fecha.ToString("dd/MM/yyyy HH:mm")</td>
                            <td>@v.NombreVendedor</td>
                            <td>@v.Estado</td>
                            <td class="tbl-text-end">@FormatCurrency(v.Total)</td>
                            <td class="tbl-text-end">
                                <div class="tbl-actions">
                                    <button class="tbl-icon-btn" title="Ver detalle" @onclick="() => VerDetalle(v)">
                                        <i class="bi bi-eye"></i>
                                    </button>

                                    @if (esAdmin)
                                    {
                                        <button class="tbl-icon-btn tbl-icon-btn--danger" title="Eliminar" @onclick="() => Eliminar(v)">
                                            <i class="bi bi-trash3"></i>
                                        </button>

                                        <button class="tbl-icon-btn @(estaPendiente ? "tbl-icon-btn--success" : "")"
                                                title="@(estaPendiente ? "Finalizar venta" : "Venta ya finalizada")"
                                                @onclick="() => Finalizar(v)"
                                                disabled="@(!estaPendiente)">

                                            @if (ventaSiendoFinalizada == v.IdVenta)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-check-circle"></i>
                                            }
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<VentaDTO>? ventas;
    private string textoFiltro = string.Empty;
    private bool esAdmin;
    private bool isLoading = false;
    private string? errorMessage;
    private int ventaSiendoFinalizada = 0;

    private string FormatCurrency(decimal amount)
    {
        return amount.ToString("C");
    }

    protected override async Task OnInitializedAsync()
    {
        esAdmin = await userSession.EsAdminAsync();
        await CargarVentas();
    }

    private async Task CargarVentas() => ventas = await ventaApiClient.GetAllAsync() ?? new();

    private IEnumerable<VentaDTO> VentasFiltradas =>
        ventas?.Where(v =>
            string.IsNullOrWhiteSpace(textoFiltro)
            || (v.NombreVendedor?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false))
        ?? Enumerable.Empty<VentaDTO>();

    private void NuevaVenta() => NavigationManager.NavigateTo("/venta/crear");

    private void VerDetalle(VentaDTO venta)
    {
        NavigationManager.NavigateTo($"/venta/detalle/{venta.IdVenta}");
    }

    private async Task Eliminar(VentaDTO venta)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Está seguro que desea eliminar la venta #{venta.IdVenta}?");
        if (!confirm) return;

        isLoading = true;
        errorMessage = null;
        try
        {
            var resp = await ventaApiClient.DeleteAsync(venta.IdVenta);
            if (resp.IsSuccessStatusCode)
            {
                await CargarVentas();
            }
            else
            {
                errorMessage = $"Error al eliminar: {await resp.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error de conexión: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Finalizar(VentaDTO venta)
    {
        if (venta.Estado?.Equals("Pendiente", StringComparison.OrdinalIgnoreCase) != true) return;

        isLoading = true;
        errorMessage = null;
        ventaSiendoFinalizada = venta.IdVenta;
        StateHasChanged();

        try
        {
            var ventaCompleta = await ventaApiClient.GetByIdAsync(venta.IdVenta);
            if (ventaCompleta == null || !ventaCompleta.IdPersona.HasValue)
            {
                errorMessage = $"No se encontró la venta {venta.IdVenta} o no tiene un vendedor asignado.";
                return;
            }

            var dto = new CrearVentaCompletaDTO
            {
                IdVenta = ventaCompleta.IdVenta,
                IdPersona = ventaCompleta.IdPersona.Value,
                Lineas = ventaCompleta.Lineas ?? new List<LineaVentaDTO>(),
                Finalizada = true
            };

            var response = await ventaApiClient.UpdateCompletaAsync(dto);

            if (response.IsSuccessStatusCode)
            {
                await CargarVentas();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al finalizar la venta: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error de conexión: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            ventaSiendoFinalizada = 0;
            StateHasChanged();
        }
    }
}
