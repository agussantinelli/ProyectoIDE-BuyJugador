@page "/venta"
@attribute [Authorize]

@using DTOs
@using ApiClient
@using BlazorApp.Auth
@inject VentaApiClient ventaApiClient
@inject UserSessionService userSession
@inject NavigationManager NavigationManager

<link href="css/Table.css" rel="stylesheet" />

@if (!string.IsNullOrEmpty(_mensaje))
{
    <div class="alert @(_esError ? "alert-danger" : "alert-success")" role="alert">
        @_mensaje
        <button type="button" class="btn-close" @onclick="() => _mensaje = null" aria-label="Close"></button>
    </div>
}

<div class="tbl-container">
    <div class="tbl-header">
        <h2 class="tbl-title">Gestión de Ventas</h2>

        <div class="tbl-search">
            <span class="bi bi-search tbl-search-icon"></span>
            <input class="tbl-input" type="text" placeholder="Buscar vendedor..."
                   value="@textoFiltro" @oninput="OnFiltroChanged" />

            <button class="btn btn-primary" @onclick="NuevaVenta">
                <i class="bi bi-plus-circle"></i>
                <span>Nueva</span>
            </button>
        </div>
    </div>

    <p class="tbl-subtitle text-muted">Total ventas cargadas: <strong>@ventas?.Count</strong></p>

    @if (ventas == null && string.IsNullOrEmpty(_mensaje))
    {
        <div class="tbl-state"><i class="bi bi-arrow-repeat spin"></i> Cargando ventas...</div>
    }
    else if (ventas != null && !ventasFiltradas.Any() && string.IsNullOrEmpty(_mensaje))
    {
        <div class="tbl-state"><i class="bi bi-inbox"></i> No se encontraron ventas.</div>
    }
    else if (ventas != null)
    {
        <div class="tbl-wrapper">
            <table class="tbl table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID Venta</th>
                        <th>Fecha</th>
                        <th>Vendedor</th>
                        <th>Estado</th>
                        <th class="tbl-text-end">Total</th>
                        <th class="tbl-text-end">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var v in ventasFiltradas)
                    {
                        bool estaPendiente = v.Estado?.Equals("Pendiente", StringComparison.OrdinalIgnoreCase) == true;

                        <tr>
                            <td>@v.IdVenta</td>
                            <td>@v.Fecha.ToString("dd/MM/yyyy HH:mm")</td>
                            <td>@v.NombreVendedor</td>
                            <td>@v.Estado</td>
                            <td class="tbl-text-end">@FormatCurrency(v.Total)</td>
                            <td class="tbl-text-end">
                                <div class="tbl-actions">
                                    <button class="tbl-icon-btn" title="Ver detalle" @onclick="() => VerDetalle(v)">
                                        <i class="bi bi-eye"></i>
                                    </button>

                                    <button class="tbl-icon-btn"
                                            title="@(estaPendiente ? "Editar" : "No se puede editar una venta finalizada")"
                                            @onclick="() => VerDetalle(v)"
                                            disabled="@(!estaPendiente)">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>

                                    <button class="tbl-icon-btn @(estaPendiente ? "tbl-icon-btn--success" : "")"
                                            title="@(estaPendiente ? "Finalizar venta" : "Venta ya finalizada")"
                                            @onclick="() => Finalizar(v)"
                                            disabled="@(!estaPendiente || ventaSiendoFinalizada != 0)">

                                        @if (ventaSiendoFinalizada == v.IdVenta)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-check-circle"></i>
                                        }
                                    </button>

                                    @if (esAdmin)
                                    {
                                        <button class="tbl-icon-btn tbl-icon-btn--danger" title="Eliminar" @onclick="() => AbrirModalConfirmacion(v)">
                                            <i class="bi bi-trash3"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<ConfirmationModal Title="Confirmar Eliminación"
                   IsVisible="_mostrarModalConfirmacion"
                   OnConfirm="EliminarConfirmado"
                   OnCancel="CerrarModalConfirmacion"
                   IsProcessing="_isEliminando"
                   ConfirmButtonText="Eliminar">
    @if (_ventaParaEliminar != null)
    {
        <p>¿Estás seguro de que deseas eliminar la venta <strong>#@_ventaParaEliminar.IdVenta</strong>?</p>
    }
</ConfirmationModal>

@code {
    private List<VentaDTO>? ventas;
    private List<VentaDTO> ventasFiltradas = new();
    private string textoFiltro = string.Empty;
    private bool esAdmin;
    private string? _mensaje;
    private bool _esError;
    private int ventaSiendoFinalizada = 0;

    // Modal state
    private bool _mostrarModalConfirmacion = false;
    private bool _isEliminando = false;
    private VentaDTO? _ventaParaEliminar;

    private string FormatCurrency(decimal amount) => amount.ToString("C");

    protected override async Task OnInitializedAsync()
    {
        esAdmin = await userSession.EsAdminAsync();
        await CargarVentas();
    }

    private async Task CargarVentas()
    {
        _mensaje = null;
        ventas = null;
        try
        {
            ventas = await ventaApiClient.GetAllAsync() ?? new();
            AplicarFiltro();
        }
        catch (Exception ex)
        {
            _mensaje = $"No se pudieron cargar las ventas: {ex.Message}";
            _esError = true;
            ventas = new();
        }
    }

    private void OnFiltroChanged(ChangeEventArgs e)
    {
        textoFiltro = e.Value?.ToString() ?? "";
        AplicarFiltro();
    }

    private void AplicarFiltro()
    {
        ventasFiltradas = ventas?
            .Where(v =>
                string.IsNullOrWhiteSpace(textoFiltro)
                || (v.NombreVendedor?.Contains(textoFiltro, StringComparison.OrdinalIgnoreCase) ?? false))
            .ToList() ?? new();
    }

    private void NuevaVenta() => NavigationManager.NavigateTo("/venta/crear");

    private void VerDetalle(VentaDTO venta) => NavigationManager.NavigateTo($"/venta/detalle/{venta.IdVenta}");

    private void AbrirModalConfirmacion(VentaDTO venta)
    {
        _ventaParaEliminar = venta;
        _mostrarModalConfirmacion = true;
        StateHasChanged();
    }

    private void CerrarModalConfirmacion()
    {
        if (_isEliminando) return;
        _mostrarModalConfirmacion = false;
        _ventaParaEliminar = null;
        StateHasChanged();
    }

    private async Task EliminarConfirmado()
    {
        if (_ventaParaEliminar == null) return;

        _isEliminando = true;
        _mensaje = null;

        try
        {
            var resp = await ventaApiClient.DeleteAsync(_ventaParaEliminar.IdVenta);
            if (resp.IsSuccessStatusCode)
            {
                _mensaje = "Venta eliminada correctamente.";
                _esError = false;
                await CargarVentas();
            }
            else
            {
                var errorBody = await resp.Content.ReadAsStringAsync();
                throw new Exception(string.IsNullOrWhiteSpace(errorBody) ? resp.ReasonPhrase : errorBody);
            }
        }
        catch (Exception ex)
        {
            _mensaje = $"Error al eliminar: {ex.Message}";
            _esError = true;
        }
        finally
        {
            _isEliminando = false;
            CerrarModalConfirmacion();
        }
    }

    private async Task Finalizar(VentaDTO venta)
    {
        if (venta.Estado?.Equals("Pendiente", StringComparison.OrdinalIgnoreCase) != true) return;

        _mensaje = null;
        ventaSiendoFinalizada = venta.IdVenta;
        StateHasChanged();

        try
        {
            var ventaCompleta = await ventaApiClient.GetByIdAsync(venta.IdVenta);
            if (ventaCompleta == null || !ventaCompleta.IdPersona.HasValue)
            {
                throw new Exception($"No se encontró la venta {venta.IdVenta} o no tiene un vendedor asignado.");
            }

            var dto = new CrearVentaCompletaDTO
            {
                IdVenta = ventaCompleta.IdVenta,
                IdPersona = ventaCompleta.IdPersona.Value,
                Lineas = ventaCompleta.Lineas ?? new List<LineaVentaDTO>(),
                Finalizada = true
            };

            var response = await ventaApiClient.UpdateCompletaAsync(dto);

            if (response.IsSuccessStatusCode)
            {
                _mensaje = "Venta finalizada correctamente.";
                _esError = false;
                await CargarVentas();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                throw new Exception(string.IsNullOrWhiteSpace(error) ? response.ReasonPhrase : error);
            }
        }
        catch (Exception ex)
        {
            _mensaje = $"Error al finalizar la venta: {ex.Message}";
            _esError = true;
        }
        finally
        {
            ventaSiendoFinalizada = 0;
            StateHasChanged();
        }
    }
}

