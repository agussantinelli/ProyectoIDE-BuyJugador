@page "/"
@* # IMPORTANTE: Esta página es pública y actúa como un "despachador". *@

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject ApiClient.ProductoApiClient ProductoApiClient
@inject ApiClient.VentaApiClient VentaApiClient
@inject ApiClient.PedidoApiClient PedidoApiClient

<PageTitle>Inicio</PageTitle>

@if (_isCheckingAuth)
{
    @* Muestra una pantalla de carga MIENTRAS se verifica la autenticación *@
    <div class="splash">
        <div class="splash-card">
            <h3>Verificando sesión...</h3>
            <div class="spinner"></div>
        </div>
    </div>
}
else if (_isAuthenticated)
{
    @* Si el usuario está autenticado, muestra el panel de control. *@
    <div class="home-wrap">
        @if (showWelcome)
        {
            <section class="welcome-panel">
                <div class="welcome-head">
                    <div>
                        <span class="bi bi-person-badge-fill"></span>
                        <strong>¡Bienvenido, @_userName!</strong>
                    </div>
                    <button class="icon-btn" title="Cerrar" @onclick="CloseWelcome">
                        <span class="bi bi-x-lg"></span>
                    </button>
                </div>
                <p class="muted">
                    Aquí tienes un resumen rápido del estado de tu negocio.
                </p>
            </section>
        }

        <section class="kpi-grid">
            @if (_isLoadingKpis)
            {
                <div class="kpi-card is-loading">
                    <div class="kpi-icon placeholder-glow"><span class="placeholder col-12"></span></div>
                    <div class="kpi-content">
                        <span class="kpi-value placeholder-glow"><span class="placeholder col-6"></span></span>
                        <span class="kpi-label placeholder-glow"><span class="placeholder col-9"></span></span>
                    </div>
                </div>
                <div class="kpi-card is-loading">
                    <div class="kpi-icon placeholder-glow"><span class="placeholder col-12"></span></div>
                    <div class="kpi-content">
                        <span class="kpi-value placeholder-glow"><span class="placeholder col-3"></span></span>
                        <span class="kpi-label placeholder-glow"><span class="placeholder col-10"></span></span>
                    </div>
                </div>
            }
            else
            {
                <div class="kpi-card">
                    <div class="kpi-icon" style="background-color: rgba(59, 130, 246, 0.1); color: #3b82f6;">
                        <i class="bi bi-cash-coin"></i>
                    </div>
                    <div class="kpi-content">
                        <span class="kpi-value">@_kpiData?.VentasHoy.ToString("C")</span>
                        <span class="kpi-label">Ventas de Hoy</span>
                    </div>
                </div>
                <div class="kpi-card">
                    <div class="kpi-icon" style="background-color: rgba(249, 115, 22, 0.1); color: #f97316;">
                        <i class="bi bi-truck"></i>
                    </div>
                    <div class="kpi-content">
                        <span class="kpi-value">@_kpiData?.PedidosPendientes</span>
                        <span class="kpi-label">Pedidos Pendientes</span>
                    </div>
                </div>
            }
        </section>

        @if (!_isLoadingKpis && _kpiData?.ProductosBajoStock?.Any() == true)
        {
            <section class="stock-alert-panel">
                <div class="stock-alert-header">
                    <i class="bi bi-exclamation-triangle-fill"></i>
                    <h4>Alerta de Stock Bajo</h4>
                </div>
                <p class="muted">Los siguientes productos necesitan tu atención:</p>
                <ul class="stock-alert-list">
                    @foreach (var producto in _kpiData.ProductosBajoStock)
                    {
                        <li class="stock-alert-item">
                            <span>@producto.Nombre</span>
                            <span class="stock-badge">Stock: @producto.Stock</span>
                        </li>
                    }
                </ul>
            </section>
        }

        <section class="quick-cards">
            <a class="qcard" href="/producto">
                <span class="bi bi-bag"></span>
                <div class="qcard-text">
                    <h4>Gestionar Productos</h4>
                    <p class="muted">Ver, crear y editar stock</p>
                </div>
            </a>
            <a class="qcard" href="/venta">
                <span class="bi bi-receipt"></span>
                <div class="qcard-text">
                    <h4>Registrar Ventas</h4>
                    <p class="muted">Crear nuevas ventas y ver historial</p>
                </div>
            </a>
            <a class="qcard" href="/pedido">
                <span class="bi bi-truck"></span>
                <div class="qcard-text">
                    <h4>Administrar Pedidos</h4>
                    <p class="muted">Gestionar pedidos a proveedores</p>
                </div>
            </a>
            <a class="qcard" href="/estadisticas">
                <span class="bi bi-graph-up"></span>
                <div class="qcard-text">
                    <h4>Ver Estadísticas</h4>
                    <p class="muted">Analizar el rendimiento del negocio</p>
                </div>
            </a>
        </section>
    </div>
}

@code {
    private bool _isAuthenticated;
    private bool _isCheckingAuth = true;

    private bool showWelcome = true;
    private bool _loadedWelcome = false;
    private string? _userName;
    private KpiData? _kpiData;
    private bool _isLoadingKpis = true;

    public class KpiData
    {
        public decimal VentasHoy { get; set; }
        public List<DTOs.ProductoDTO> ProductosBajoStock { get; set; } = new();
        public int PedidosPendientes { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            _isAuthenticated = true;
            _userName = user.Identity.Name ?? "Admin";
            await LoadKpiData();
            _isLoadingKpis = false;
        }
        else
        {
            _isAuthenticated = false;
            Nav.NavigateTo("/login");
        }
        _isCheckingAuth = false;
    }

    private async Task LoadKpiData()
    {
        await Task.Delay(500); // Simulación reducida para una carga más rápida
        var random = new Random();
        _kpiData = new KpiData
        {
            VentasHoy = (decimal)(random.Next(500, 5000) + random.NextDouble()),
            PedidosPendientes = random.Next(0, 8),
            ProductosBajoStock = new List<DTOs.ProductoDTO>
            {
                new() { Nombre = "Producto Ejemplo A", Stock = 3 },
                new() { Nombre = "Producto Ejemplo B", Stock = 1 },
                new() { Nombre = "Producto Ejemplo C", Stock = 5 }
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || !_isAuthenticated || _loadedWelcome) return;

        try
        {
            var val = await JS.InvokeAsync<string?>("localStorage.getItem", "hideWelcome");
            showWelcome = val != "1";
            _loadedWelcome = true;
            StateHasChanged();
        }
        catch
        {
            _loadedWelcome = true;
        }
    }

    private async Task CloseWelcome()
    {
        showWelcome = false;
        try
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "hideWelcome", "1");
        }
        catch { }
    }
}

