@page "/"
@attribute [Authorize]

@inject ApiClient.ProductoApiClient ProductoApiClient
@inject ApiClient.VentaApiClient VentaApiClient
@inject ApiClient.PedidoApiClient PedidoApiClient
@inject IJSRuntime JS
@inject UserSessionService userSession

<PageTitle>Inicio</PageTitle>

<div class="home-wrap">
    @if (showWelcome)
    {
        <section class="welcome-panel">
            <div class="welcome-head">
                <div>
                    <span class="bi bi-person-badge-fill"></span>
                    <strong>¡Bienvenido, @(_userName ?? "Usuario")!</strong>
                </div>
                <button class="icon-btn" title="Cerrar" @onclick="CloseWelcome">
                    <span class="bi bi-x-lg"></span>
                </button>
            </div>
            <p class="muted">Aquí tienes un resumen rápido del estado de tu negocio.</p>
        </section>
    }

    <section class="kpi-grid">
        @if (_isLoadingKpis)
        {
            <div class="kpi-card is-loading">
                <div class="kpi-icon placeholder-glow"><span class="placeholder col-12"></span></div>
                <div class="kpi-content">
                    <span class="kpi-value placeholder-glow"><span class="placeholder col-6"></span></span>
                    <span class="kpi-label placeholder-glow"><span class="placeholder col-9"></span></span>
                </div>
            </div>
            <div class="kpi-card is-loading">
                <div class="kpi-icon placeholder-glow"><span class="placeholder col-12"></span></div>
                <div class="kpi-content">
                    <span class="kpi-value placeholder-glow"><span class="placeholder col-3"></span></span>
                    <span class="kpi-label placeholder-glow"><span class="placeholder col-10"></span></span>
                </div>
            </div>
            <div class="kpi-card is-loading">
                <div class="kpi-icon placeholder-glow"><span class="placeholder col-12"></span></div>
                <div class="kpi-content">
                    <span class="kpi-value placeholder-glow"><span class="placeholder col-5"></span></span>
                    <span class="kpi-label placeholder-glow"><span class="placeholder col-8"></span></span>
                </div>
            </div>
        }
        else
        {
            <div class="kpi-card">
                <div class="kpi-icon kpi-blue">
                    <i class="bi bi-cash-coin"></i>
                </div>
                <div class="kpi-content">
                    <span class="kpi-value">@_kpiData?.VentasHoy.ToString("C")</span>
                    <span class="kpi-label">Ventas Finalizadas de Hoy</span>
                </div>
            </div>

            <div class="kpi-card">
                <div class="kpi-icon kpi-orange">
                    <i class="bi bi-truck"></i>
                </div>
                <div class="kpi-content">
                    <span class="kpi-value">@_kpiData?.PedidosPendientes</span>
                    <span class="kpi-label">Pedidos Pendientes</span>
                </div>
            </div>

            <div class="kpi-card">
                <div class="kpi-icon" style="background-color: rgba(239,68,68,.12); color:#ef4444;">
                    <i class="bi bi-exclamation-triangle-fill"></i>
                </div>
                <div class="kpi-content" style="gap:.2rem;">
                    <span class="kpi-value">@LowStockCount</span>
                    <span class="kpi-label">Productos con stock &lt; 10</span>

                    @if (LowStockCount > 0 && WorstLowStock is not null)
                    {
                        <small class="muted">
                            @(LowStockCount > 10 ? "Peor caso" : "Menor stock"):
                            <strong>@WorstLowStock!.Nombre</strong> (<strong>@WorstLowStock!.Stock</strong>)
                        </small>
                    }
                    else
                    {
                        <small class="muted">Sin alertas de stock.</small>
                    }

                    <div style="margin-top:.35rem;">
                        <a href="/producto" class="btn btn-primary btn-sm">
                            <i class="bi bi-box-seam me-1"></i> Ver productos
                        </a>
                    </div>
                </div>
            </div>
        }
    </section>

    @if (!_isLoadingKpis && _kpiData?.ProductosBajoStock?.Any() == true)
    {
        <section class="stock-alert-panel">
            <div class="stock-alert-header">
                <i class="bi bi-exclamation-triangle-fill"></i>
                <h4>Alerta de Stock Bajo</h4>
            </div>
            <p class="muted">Los siguientes productos necesitan tu atención:</p>
            <ul class="stock-alert-list">
                @foreach (var producto in _kpiData!.ProductosBajoStock)
                {
                    <li class="stock-alert-item">
                        <span>@producto.Nombre</span>
                        <span class="stock-badge">Stock: @producto.Stock</span>
                    </li>
                }
            </ul>
        </section>
    }

    <section class="quick-cards">
        <a class="qcard" href="/producto">
            <span class="bi bi-bag"></span>
            <div class="qcard-text">
                <h4>Gestionar Productos</h4>
                <p class="muted">@(_esAdmin ? "Ver, crear y editar stock" : "Consultar stock y precios")</p>
            </div>
        </a>

        <a class="qcard" href="/venta">
            <span class="bi bi-receipt"></span>
            <div class="qcard-text">
                <h4>Registrar Ventas</h4>
                <p class="muted">@(_esAdmin ? "Crear y administrar ventas" : "Crear y administrar ventas")</p>
            </div>
        </a>

        <a class="qcard" href="/pedido">
            <span class="bi bi-truck"></span>
            <div class="qcard-text">
                <h4>Administrar Pedidos</h4>
                <p class="muted">@(_esAdmin ? "Crear, editar, recibir y eliminar pedidos" : "Crear, editar y recibir pedidos")</p>
            </div>
        </a>

        <a class="qcard" href="/proveedor">
            <span class="bi bi-building"></span>
            <div class="qcard-text">
                <h4>Proveedores</h4>
                <p class="muted">@(_esAdmin ? "Altas, ediciones, bajas y consultas" : "Consultar y ver productos asignados")</p>
            </div>
        </a>

        @if (_esAdmin)
        {
            <a class="qcard" href="/reporte/precios">
                <span class="bi bi-activity"></span>
                <div class="qcard-text">
                    <h4>Historial de Precios</h4>
                    <p class="muted">Evolución de precios</p>
                </div>
            </a>
            <a class="qcard" href="/reporte/ventas">
                <span class="bi bi-file-earmark-bar-graph"></span>
                <div class="qcard-text">
                    <h4>Reporte de Ventas</h4>
                    <p class="muted">Ventas por vendedor</p>
                </div>
            </a>
        }
    </section>
</div>

@code {
    private bool showWelcome = true;
    private bool _loadedWelcome = false;

    private string? _userName;
    private KpiData? _kpiData;
    private bool _isLoadingKpis = true;
    private bool _esAdmin = false;

    private List<DTOs.ProductoDTO> _lowStock = new();
    private int LowStockCount => _lowStock?.Count ?? 0;
    private DTOs.ProductoDTO? WorstLowStock =>
        _lowStock.OrderBy(p => p.Stock).ThenBy(p => p.Nombre).FirstOrDefault();

    public class KpiData
    {
        public decimal VentasHoy { get; set; }
        public List<DTOs.ProductoDTO> ProductosBajoStock { get; set; } = new();
        public int PedidosPendientes { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        _userName = "Admin";
        _esAdmin = await userSession.EsAdminAsync();
        await LoadKpiData();
        _isLoadingKpis = false;
    }

    private async Task LoadKpiData()
    {
        const int LIMITE = 10;

        decimal ventasHoy = 0;
        int pedidosPend = 0;
        var lowFromApi = new List<DTOs.ProductoDTO>();
        var allProducts = new List<DTOs.ProductoDTO>();

        var t1 = Task.Run(async () =>
        {
            try { ventasHoy = await VentaApiClient.GetTotalVentasHoyAsync(); } catch { ventasHoy = 0; }
        });
        var t2 = Task.Run(async () =>
        {
            try { pedidosPend = await PedidoApiClient.GetCantidadPedidosPendientesAsync(); } catch { pedidosPend = 0; }
        });
        var t3 = Task.Run(async () =>
        {
            try { lowFromApi = await ProductoApiClient.GetProductosBajoStockAsync(LIMITE) ?? new(); } catch { lowFromApi = new(); }
        });
        var t4 = Task.Run(async () =>
        {
            try { allProducts = await ProductoApiClient.GetAllAsync() ?? new(); } catch { allProducts = new(); }
        });

        await Task.WhenAll(t1, t2, t3, t4);

        var lowLocal = allProducts.Where(p => p != null && p.Stock < LIMITE).ToList();

        _lowStock = lowFromApi.Concat(lowLocal)
                              .GroupBy(p => p.IdProducto)
                              .Select(g => g.First())
                              .ToList();

        _kpiData = new KpiData
        {
            VentasHoy = ventasHoy,
            PedidosPendientes = pedidosPend,
            ProductosBajoStock = _lowStock
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || _loadedWelcome) return;
        try
        {
            var val = await JS.InvokeAsync<string?>("localStorage.getItem", "hideWelcome");
            showWelcome = val != "1";
            _loadedWelcome = true;
            StateHasChanged();
        }
        catch
        {
            _loadedWelcome = true;
        }
    }

    private async Task CloseWelcome()
    {
        showWelcome = false;
        try { await JS.InvokeVoidAsync("localStorage.setItem", "hideWelcome", "1"); } catch { }
    }
}
