@page "/"
@layout EmptyLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView>
    <NotAuthorized>
        <div class="login-container">
            <h3>Iniciar Sesión</h3>
            <div class="card">
                <div class="card-body">
                    <div class="form-group">
                        <label>Email</label>
                        <input class="form-control" @bind="loginModel.Email" />
                    </div>
                    <div class="form-group mt-2">
                        <label>Contraseña</label>
                        <input type="password" class="form-control" @bind="loginModel.Password" />
                    </div>
                    <button class="btn btn-primary mt-3" @onclick="HandleLogin">Login</button>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-2">@errorMessage</div>
                    }
                </div>
            </div>
        </div>
    </NotAuthorized>
    <Authorized>
        <p>Verificando sesión...</p>
    </Authorized>
</AuthorizeView>

@code {
    private class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }

    private LoginModel loginModel = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // Esta lógica se ejecuta cuando el componente carga.
        // Si el usuario ya está autenticado, lo redirige.
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("Dueño"))
            {
                NavigationManager.NavigateTo("/dashboard-dueño");
            }
            else if (user.IsInRole("Empleado"))
            {
                NavigationManager.NavigateTo("/dashboard-empleado");
            }
            else
            {
                NavigationManager.NavigateTo("/productos"); // Ruta por defecto
            }
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            var result = await Http.PostAsJsonAsync("api/auth/login", loginModel);

            if (result.IsSuccessStatusCode)
            {
                var response = await result.Content.ReadFromJsonAsync<AuthResponse>();
                await ((CustomAuthenticationStateProvider)AuthStateProvider).MarkUserAsAuthenticated(response.Token);

                // Forzamos la recarga de la página para que OnInitializedAsync se vuelva a ejecutar
                // y se encargue de la redirección por rol.
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "Credenciales inválidas.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ocurrió un error al intentar iniciar sesión.";
        }
    }

    private class AuthResponse
    {
        public string Token { get; set; }
    }
}