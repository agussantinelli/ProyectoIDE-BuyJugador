@page "/"
@layout EmptyLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@using DTOs

<AuthorizeView>
    <NotAuthorized>
        <div class="login-container">
            <h3>Iniciar Sesión</h3>
            <div class="card">
                <div class="card-body">
                    <div class="form-group">
                        <label>DNI</label>
                        <input type="number" class="form-control" @bind="loginModel.Dni" />
                    </div>
                    <div class="form-group mt-2">
                        <label>Contraseña</label>
                        <input type="password" class="form-control" @bind="loginModel.Password" />
                    </div>
                    <button class="btn btn-primary mt-3" @onclick="HandleLogin">Login</button>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-2">@errorMessage</div>
                    }
                </div>
            </div>
        </div>
    </NotAuthorized>
    <Authorized>
        <p>Verificando sesión...</p>
    </Authorized>
</AuthorizeView>

@code {
    // Usaremos un DTO que coincida con lo que espera la API
    private class LoginModel
    {
        public int Dni { get; set; }
        public string Password { get; set; } = "";
    }

    private LoginModel loginModel = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("Dueño"))
            {
                NavigationManager.NavigateTo("/dashboard-dueño");
            }
            else if (user.IsInRole("Empleado"))
            {
                NavigationManager.NavigateTo("/dashboard-empleado");
            }
            else
            {
                NavigationManager.NavigateTo("/productos");
            }
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            // LLAMAMOS AL ENDPOINT CORRECTO: "api/personas/login"
            var response = await Http.PostAsJsonAsync("api/personas/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                // La API nos devuelve el usuario completo (PersonaDTO)
                var loggedInUser = await response.Content.ReadFromJsonAsync<PersonaDTO>();

                // Le pasamos el DTO al proveedor de autenticación para que guarde los datos
                await ((CustomAuthenticationStateProvider)AuthStateProvider).MarkUserAsAuthenticated(loggedInUser);

                // Recargamos para que OnInitializedAsync haga la redirección
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "DNI o contraseña incorrectos.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ocurrió un error al intentar iniciar sesión.";
        }
    }
}